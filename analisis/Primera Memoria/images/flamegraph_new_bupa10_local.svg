<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="677.00"> </text><svg id="frames" x="10" width="1180"><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (1 samples, 0.01%)</title><rect x="0.0000%" y="613" width="0.0134%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="623.50"></text></g><g><title>__GI___libc_free (16 samples, 0.21%)</title><rect x="0.0134%" y="597" width="0.2145%" height="15" fill="rgb(217,0,24)"/><text x="0.2634%" y="607.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.43%)</title><rect x="0.2279%" y="597" width="0.4290%" height="15" fill="rgb(221,193,54)"/><text x="0.4779%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="0.6569%" y="597" width="0.0402%" height="15" fill="rgb(248,212,6)"/><text x="0.9069%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="0.6971%" y="597" width="0.0134%" height="15" fill="rgb(208,68,35)"/><text x="0.9471%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="0.6971%" y="581" width="0.0134%" height="15" fill="rgb(232,128,0)"/><text x="0.9471%" y="591.50"></text></g><g><title>_int_realloc (2 samples, 0.03%)</title><rect x="0.7106%" y="597" width="0.0268%" height="15" fill="rgb(207,160,47)"/><text x="0.9606%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.04%)</title><rect x="0.9921%" y="549" width="0.0402%" height="15" fill="rgb(228,23,34)"/><text x="1.2421%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.35%)</title><rect x="0.7374%" y="597" width="0.3486%" height="15" fill="rgb(218,30,26)"/><text x="0.9874%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (7 samples, 0.09%)</title><rect x="0.9921%" y="581" width="0.0938%" height="15" fill="rgb(220,122,19)"/><text x="1.2421%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.09%)</title><rect x="0.9921%" y="565" width="0.0938%" height="15" fill="rgb(250,228,42)"/><text x="1.2421%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.05%)</title><rect x="1.0323%" y="549" width="0.0536%" height="15" fill="rgb(240,193,28)"/><text x="1.2823%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.05%)</title><rect x="1.0323%" y="533" width="0.0536%" height="15" fill="rgb(216,20,37)"/><text x="1.2823%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.05%)</title><rect x="1.0323%" y="517" width="0.0536%" height="15" fill="rgb(206,188,39)"/><text x="1.2823%" y="527.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.05%)</title><rect x="1.0323%" y="501" width="0.0536%" height="15" fill="rgb(217,207,13)"/><text x="1.2823%" y="511.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (1 samples, 0.01%)</title><rect x="1.0859%" y="597" width="0.0134%" height="15" fill="rgb(231,73,38)"/><text x="1.3359%" y="607.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (1 samples, 0.01%)</title><rect x="1.0859%" y="581" width="0.0134%" height="15" fill="rgb(225,20,46)"/><text x="1.3359%" y="591.50"></text></g><g><title>&lt;T as ndarray::shape_builder::ShapeBuilder&gt;::into_shape (1 samples, 0.01%)</title><rect x="1.0859%" y="565" width="0.0134%" height="15" fill="rgb(210,31,41)"/><text x="1.3359%" y="575.50"></text></g><g><title>[[heap]] (89 samples, 1.19%)</title><rect x="0.0134%" y="613" width="1.1932%" height="15" fill="rgb(221,200,47)"/><text x="0.2634%" y="623.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (8 samples, 0.11%)</title><rect x="1.0993%" y="597" width="0.1073%" height="15" fill="rgb(226,26,5)"/><text x="1.3493%" y="607.50"></text></g><g><title>__GI___libc_free (27 samples, 0.36%)</title><rect x="1.2066%" y="597" width="0.3620%" height="15" fill="rgb(249,33,26)"/><text x="1.4566%" y="607.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.12%)</title><rect x="1.5686%" y="597" width="0.1207%" height="15" fill="rgb(235,183,28)"/><text x="1.8186%" y="607.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="1.6892%" y="597" width="0.0134%" height="15" fill="rgb(221,5,38)"/><text x="1.9392%" y="607.50"></text></g><g><title>_int_free (97 samples, 1.30%)</title><rect x="1.7026%" y="597" width="1.3004%" height="15" fill="rgb(247,18,42)"/><text x="1.9526%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="3.0031%" y="597" width="0.0134%" height="15" fill="rgb(241,131,45)"/><text x="3.2531%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.05%)</title><rect x="3.0165%" y="597" width="0.0536%" height="15" fill="rgb(249,31,29)"/><text x="3.2665%" y="607.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (23 samples, 0.31%)</title><rect x="3.0701%" y="597" width="0.3084%" height="15" fill="rgb(225,111,53)"/><text x="3.3201%" y="607.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (11 samples, 0.15%)</title><rect x="3.3785%" y="597" width="0.1475%" height="15" fill="rgb(238,160,17)"/><text x="3.6285%" y="607.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (5 samples, 0.07%)</title><rect x="3.5259%" y="597" width="0.0670%" height="15" fill="rgb(214,148,48)"/><text x="3.7759%" y="607.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (5 samples, 0.07%)</title><rect x="3.5259%" y="581" width="0.0670%" height="15" fill="rgb(232,36,49)"/><text x="3.7759%" y="591.50"></text></g><g><title>ndarray::numeric_util::unrolled_fold (6 samples, 0.08%)</title><rect x="3.5930%" y="597" width="0.0804%" height="15" fill="rgb(209,103,24)"/><text x="3.8430%" y="607.50"></text></g><g><title>[[stack]] (188 samples, 2.52%)</title><rect x="1.2066%" y="613" width="2.5204%" height="15" fill="rgb(229,88,8)"/><text x="1.4566%" y="623.50">[[..</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.05%)</title><rect x="3.6734%" y="597" width="0.0536%" height="15" fill="rgb(213,181,19)"/><text x="3.9234%" y="607.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (52 samples, 0.70%)</title><rect x="3.7270%" y="597" width="0.6971%" height="15" fill="rgb(254,191,54)"/><text x="3.9770%" y="607.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (46 samples, 0.62%)</title><rect x="3.8075%" y="581" width="0.6167%" height="15" fill="rgb(241,83,37)"/><text x="4.0575%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.34%)</title><rect x="4.0890%" y="565" width="0.3352%" height="15" fill="rgb(233,36,39)"/><text x="4.3390%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.34%)</title><rect x="4.0890%" y="549" width="0.3352%" height="15" fill="rgb(226,3,54)"/><text x="4.3390%" y="559.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.34%)</title><rect x="4.0890%" y="533" width="0.3352%" height="15" fill="rgb(245,192,40)"/><text x="4.3390%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.34%)</title><rect x="4.0890%" y="517" width="0.3352%" height="15" fill="rgb(238,167,29)"/><text x="4.3390%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.34%)</title><rect x="4.0890%" y="501" width="0.3352%" height="15" fill="rgb(232,182,51)"/><text x="4.3390%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.34%)</title><rect x="4.0890%" y="485" width="0.3352%" height="15" fill="rgb(231,60,39)"/><text x="4.3390%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (25 samples, 0.34%)</title><rect x="4.0890%" y="469" width="0.3352%" height="15" fill="rgb(208,69,12)"/><text x="4.3390%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.34%)</title><rect x="4.0890%" y="453" width="0.3352%" height="15" fill="rgb(235,93,37)"/><text x="4.3390%" y="463.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_neighbour (2 samples, 0.03%)</title><rect x="4.4242%" y="597" width="0.0268%" height="15" fill="rgb(213,116,39)"/><text x="4.6742%" y="607.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (2 samples, 0.03%)</title><rect x="4.4242%" y="581" width="0.0268%" height="15" fill="rgb(222,207,29)"/><text x="4.6742%" y="591.50"></text></g><g><title>rand::seq::gen_index (2 samples, 0.03%)</title><rect x="4.4242%" y="565" width="0.0268%" height="15" fill="rgb(206,96,30)"/><text x="4.6742%" y="575.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::calculate_centroid (6 samples, 0.08%)</title><rect x="4.5851%" y="565" width="0.0804%" height="15" fill="rgb(218,138,4)"/><text x="4.8351%" y="575.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (17 samples, 0.23%)</title><rect x="4.4510%" y="597" width="0.2279%" height="15" fill="rgb(250,191,14)"/><text x="4.7010%" y="607.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_cluster_distance (16 samples, 0.21%)</title><rect x="4.4644%" y="581" width="0.2145%" height="15" fill="rgb(239,60,40)"/><text x="4.7144%" y="591.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_points_in_cluster (1 samples, 0.01%)</title><rect x="4.6655%" y="565" width="0.0134%" height="15" fill="rgb(206,27,48)"/><text x="4.9155%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="4.6655%" y="549" width="0.0134%" height="15" fill="rgb(225,35,8)"/><text x="4.9155%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="4.6655%" y="533" width="0.0134%" height="15" fill="rgb(250,213,24)"/><text x="4.9155%" y="543.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility (1 samples, 0.01%)</title><rect x="4.6789%" y="597" width="0.0134%" height="15" fill="rgb(247,123,22)"/><text x="4.9289%" y="607.50"></text></g><g><title>__GI___libc_free (36 samples, 0.48%)</title><rect x="4.6923%" y="597" width="0.4826%" height="15" fill="rgb(231,138,38)"/><text x="4.9423%" y="607.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.35%)</title><rect x="5.1750%" y="597" width="0.3486%" height="15" fill="rgb(231,145,46)"/><text x="5.4250%" y="607.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.05%)</title><rect x="5.5235%" y="597" width="0.0536%" height="15" fill="rgb(251,118,11)"/><text x="5.7735%" y="607.50"></text></g><g><title>__calloc (4 samples, 0.05%)</title><rect x="5.5772%" y="597" width="0.0536%" height="15" fill="rgb(217,147,25)"/><text x="5.8272%" y="607.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="5.6308%" y="597" width="0.0402%" height="15" fill="rgb(247,81,37)"/><text x="5.8808%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="5.6576%" y="581" width="0.0134%" height="15" fill="rgb(209,12,38)"/><text x="5.9076%" y="591.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.01%)</title><rect x="5.6710%" y="597" width="0.0134%" height="15" fill="rgb(227,1,9)"/><text x="5.9210%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.01%)</title><rect x="5.6710%" y="581" width="0.0134%" height="15" fill="rgb(248,47,43)"/><text x="5.9210%" y="591.50"></text></g><g><title>__rdl_realloc (4 samples, 0.05%)</title><rect x="5.6844%" y="597" width="0.0536%" height="15" fill="rgb(221,10,30)"/><text x="5.9344%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.05%)</title><rect x="5.6844%" y="581" width="0.0536%" height="15" fill="rgb(210,229,1)"/><text x="5.9344%" y="591.50"></text></g><g><title>_int_malloc (6 samples, 0.08%)</title><rect x="5.7380%" y="597" width="0.0804%" height="15" fill="rgb(222,148,37)"/><text x="5.9880%" y="607.50"></text></g><g><title>_int_realloc (4 samples, 0.05%)</title><rect x="5.8185%" y="597" width="0.0536%" height="15" fill="rgb(234,67,33)"/><text x="6.0685%" y="607.50"></text></g><g><title>malloc_consolidate (1 samples, 0.01%)</title><rect x="5.8721%" y="597" width="0.0134%" height="15" fill="rgb(247,98,35)"/><text x="6.1221%" y="607.50"></text></g><g><title>&lt;T as ndarray::shape_builder::ShapeBuilder&gt;::into_shape (1 samples, 0.01%)</title><rect x="5.8989%" y="565" width="0.0134%" height="15" fill="rgb(247,138,52)"/><text x="6.1489%" y="575.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (3 samples, 0.04%)</title><rect x="5.8855%" y="597" width="0.0402%" height="15" fill="rgb(213,79,30)"/><text x="6.1355%" y="607.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (2 samples, 0.03%)</title><rect x="5.8989%" y="581" width="0.0268%" height="15" fill="rgb(246,177,23)"/><text x="6.1489%" y="591.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.01%)</title><rect x="5.9123%" y="565" width="0.0134%" height="15" fill="rgb(230,62,27)"/><text x="6.1623%" y="575.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (1 samples, 0.01%)</title><rect x="5.9123%" y="549" width="0.0134%" height="15" fill="rgb(216,154,8)"/><text x="6.1623%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (1 samples, 0.01%)</title><rect x="5.9123%" y="533" width="0.0134%" height="15" fill="rgb(244,35,45)"/><text x="6.1623%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.01%)</title><rect x="5.9123%" y="517" width="0.0134%" height="15" fill="rgb(251,115,12)"/><text x="6.1623%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="5.9123%" y="501" width="0.0134%" height="15" fill="rgb(240,54,50)"/><text x="6.1623%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (1 samples, 0.01%)</title><rect x="5.9123%" y="485" width="0.0134%" height="15" fill="rgb(233,84,52)"/><text x="6.1623%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="5.9123%" y="469" width="0.0134%" height="15" fill="rgb(207,117,47)"/><text x="6.1623%" y="479.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.01%)</title><rect x="5.9123%" y="453" width="0.0134%" height="15" fill="rgb(249,43,39)"/><text x="6.1623%" y="463.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (31 samples, 0.42%)</title><rect x="5.9257%" y="597" width="0.4156%" height="15" fill="rgb(209,38,44)"/><text x="6.1757%" y="607.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (8 samples, 0.11%)</title><rect x="6.2341%" y="581" width="0.1073%" height="15" fill="rgb(236,212,23)"/><text x="6.4841%" y="591.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (8 samples, 0.11%)</title><rect x="6.2341%" y="565" width="0.1073%" height="15" fill="rgb(242,79,21)"/><text x="6.4841%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.11%)</title><rect x="6.2341%" y="549" width="0.1073%" height="15" fill="rgb(211,96,35)"/><text x="6.4841%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.11%)</title><rect x="6.2341%" y="533" width="0.1073%" height="15" fill="rgb(253,215,40)"/><text x="6.4841%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.11%)</title><rect x="6.2341%" y="517" width="0.1073%" height="15" fill="rgb(211,81,21)"/><text x="6.4841%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.11%)</title><rect x="6.2341%" y="501" width="0.1073%" height="15" fill="rgb(208,190,38)"/><text x="6.4841%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.11%)</title><rect x="6.2341%" y="485" width="0.1073%" height="15" fill="rgb(235,213,38)"/><text x="6.4841%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.11%)</title><rect x="6.2341%" y="469" width="0.1073%" height="15" fill="rgb(237,122,38)"/><text x="6.4841%" y="479.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.11%)</title><rect x="6.2341%" y="453" width="0.1073%" height="15" fill="rgb(244,218,35)"/><text x="6.4841%" y="463.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (41 samples, 0.55%)</title><rect x="6.3413%" y="597" width="0.5497%" height="15" fill="rgb(240,68,47)"/><text x="6.5913%" y="607.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (1 samples, 0.01%)</title><rect x="6.8910%" y="597" width="0.0134%" height="15" fill="rgb(210,16,53)"/><text x="7.1410%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (8 samples, 0.11%)</title><rect x="7.2262%" y="501" width="0.1073%" height="15" fill="rgb(235,124,12)"/><text x="7.4762%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (26 samples, 0.35%)</title><rect x="7.2262%" y="533" width="0.3486%" height="15" fill="rgb(224,169,11)"/><text x="7.4762%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.35%)</title><rect x="7.2262%" y="517" width="0.3486%" height="15" fill="rgb(250,166,2)"/><text x="7.4762%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (18 samples, 0.24%)</title><rect x="7.3334%" y="501" width="0.2413%" height="15" fill="rgb(242,216,29)"/><text x="7.5834%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.24%)</title><rect x="7.3334%" y="485" width="0.2413%" height="15" fill="rgb(230,116,27)"/><text x="7.5834%" y="495.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (52 samples, 0.70%)</title><rect x="6.9044%" y="597" width="0.6971%" height="15" fill="rgb(228,99,48)"/><text x="7.1544%" y="607.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (28 samples, 0.38%)</title><rect x="7.2262%" y="581" width="0.3754%" height="15" fill="rgb(253,11,6)"/><text x="7.4762%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.38%)</title><rect x="7.2262%" y="565" width="0.3754%" height="15" fill="rgb(247,143,39)"/><text x="7.4762%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.38%)</title><rect x="7.2262%" y="549" width="0.3754%" height="15" fill="rgb(236,97,10)"/><text x="7.4762%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="7.5747%" y="533" width="0.0268%" height="15" fill="rgb(233,208,19)"/><text x="7.8247%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="7.5747%" y="517" width="0.0268%" height="15" fill="rgb(216,164,2)"/><text x="7.8247%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="7.5747%" y="501" width="0.0268%" height="15" fill="rgb(220,129,5)"/><text x="7.8247%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="7.5747%" y="485" width="0.0268%" height="15" fill="rgb(242,17,10)"/><text x="7.8247%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.03%)</title><rect x="7.5747%" y="469" width="0.0268%" height="15" fill="rgb(242,107,0)"/><text x="7.8247%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="7.5747%" y="453" width="0.0268%" height="15" fill="rgb(251,28,31)"/><text x="7.8247%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="7.5747%" y="437" width="0.0268%" height="15" fill="rgb(233,223,10)"/><text x="7.8247%" y="447.50"></text></g><g><title>rand::rng::Rng::gen_range (8 samples, 0.11%)</title><rect x="7.6016%" y="597" width="0.1073%" height="15" fill="rgb(215,21,27)"/><text x="7.8516%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::is_empty (6 samples, 0.08%)</title><rect x="7.6284%" y="581" width="0.0804%" height="15" fill="rgb(232,23,21)"/><text x="7.8784%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (6 samples, 0.08%)</title><rect x="7.6284%" y="565" width="0.0804%" height="15" fill="rgb(244,5,23)"/><text x="7.8784%" y="575.50"></text></g><g><title>[unknown] (298 samples, 4.00%)</title><rect x="3.7270%" y="613" width="3.9952%" height="15" fill="rgb(226,81,46)"/><text x="3.9770%" y="623.50">[unk..</text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.01%)</title><rect x="7.7088%" y="597" width="0.0134%" height="15" fill="rgb(247,70,30)"/><text x="7.9588%" y="607.50"></text></g><g><title>&lt;csv::string_record::StringRecord as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="373" width="0.0134%" height="15" fill="rgb(212,68,19)"/><text x="8.0392%" y="383.50"></text></g><g><title>&lt;csv::byte_record::ByteRecord as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="357" width="0.0134%" height="15" fill="rgb(240,187,13)"/><text x="8.0392%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="341" width="0.0134%" height="15" fill="rgb(223,113,26)"/><text x="8.0392%" y="351.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordInner as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="325" width="0.0134%" height="15" fill="rgb(206,192,2)"/><text x="8.0392%" y="335.50"></text></g><g><title>&lt;csv::byte_record::Bounds as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="309" width="0.0134%" height="15" fill="rgb(241,108,4)"/><text x="8.0392%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="7.7892%" y="293" width="0.0134%" height="15" fill="rgb(247,173,49)"/><text x="8.0392%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.01%)</title><rect x="7.7892%" y="277" width="0.0134%" height="15" fill="rgb(224,114,35)"/><text x="8.0392%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="7.7892%" y="261" width="0.0134%" height="15" fill="rgb(245,159,27)"/><text x="8.0392%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.7892%" y="245" width="0.0134%" height="15" fill="rgb(245,172,44)"/><text x="8.0392%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.7892%" y="229" width="0.0134%" height="15" fill="rgb(236,23,11)"/><text x="8.0392%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="7.7892%" y="213" width="0.0134%" height="15" fill="rgb(205,117,38)"/><text x="8.0392%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="7.7892%" y="197" width="0.0134%" height="15" fill="rgb(237,72,25)"/><text x="8.0392%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.01%)</title><rect x="7.7892%" y="181" width="0.0134%" height="15" fill="rgb(244,70,9)"/><text x="8.0392%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="7.7892%" y="165" width="0.0134%" height="15" fill="rgb(217,125,39)"/><text x="8.0392%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="7.7892%" y="149" width="0.0134%" height="15" fill="rgb(235,36,10)"/><text x="8.0392%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="7.7892%" y="133" width="0.0134%" height="15" fill="rgb(251,123,47)"/><text x="8.0392%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="7.7892%" y="117" width="0.0134%" height="15" fill="rgb(221,13,13)"/><text x="8.0392%" y="127.50"></text></g><g><title>malloc_consolidate (1 samples, 0.01%)</title><rect x="7.7892%" y="101" width="0.0134%" height="15" fill="rgb(238,131,9)"/><text x="8.0392%" y="111.50"></text></g><g><title>csv_core::reader::Dfa::get_output (1 samples, 0.01%)</title><rect x="7.8027%" y="277" width="0.0134%" height="15" fill="rgb(211,50,8)"/><text x="8.0527%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="7.7892%" y="405" width="0.0402%" height="15" fill="rgb(245,182,24)"/><text x="8.0392%" y="415.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="7.7892%" y="389" width="0.0402%" height="15" fill="rgb(242,14,37)"/><text x="8.0392%" y="399.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (2 samples, 0.03%)</title><rect x="7.8027%" y="373" width="0.0268%" height="15" fill="rgb(246,228,12)"/><text x="8.0527%" y="383.50"></text></g><g><title>csv::string_record::StringRecord::read (2 samples, 0.03%)</title><rect x="7.8027%" y="357" width="0.0268%" height="15" fill="rgb(213,55,15)"/><text x="8.0527%" y="367.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (2 samples, 0.03%)</title><rect x="7.8027%" y="341" width="0.0268%" height="15" fill="rgb(209,9,3)"/><text x="8.0527%" y="351.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (2 samples, 0.03%)</title><rect x="7.8027%" y="325" width="0.0268%" height="15" fill="rgb(230,59,30)"/><text x="8.0527%" y="335.50"></text></g><g><title>csv_core::reader::Reader::read_record (2 samples, 0.03%)</title><rect x="7.8027%" y="309" width="0.0268%" height="15" fill="rgb(209,121,21)"/><text x="8.0527%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (2 samples, 0.03%)</title><rect x="7.8027%" y="293" width="0.0268%" height="15" fill="rgb(220,109,13)"/><text x="8.0527%" y="303.50"></text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (1 samples, 0.01%)</title><rect x="7.8161%" y="277" width="0.0134%" height="15" fill="rgb(232,18,1)"/><text x="8.0661%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.8295%" y="293" width="0.0134%" height="15" fill="rgb(215,41,42)"/><text x="8.0795%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.8295%" y="277" width="0.0134%" height="15" fill="rgb(224,123,36)"/><text x="8.0795%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="7.8295%" y="261" width="0.0134%" height="15" fill="rgb(240,125,3)"/><text x="8.0795%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="7.8295%" y="245" width="0.0134%" height="15" fill="rgb(205,98,50)"/><text x="8.0795%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.01%)</title><rect x="7.8295%" y="229" width="0.0134%" height="15" fill="rgb(205,185,37)"/><text x="8.0795%" y="239.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::constraints::Constraints::add_constraint (2 samples, 0.03%)</title><rect x="7.8295%" y="405" width="0.0268%" height="15" fill="rgb(238,207,15)"/><text x="8.0795%" y="415.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::constraints::Constraints::has_element (2 samples, 0.03%)</title><rect x="7.8295%" y="389" width="0.0268%" height="15" fill="rgb(213,199,42)"/><text x="8.0795%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.03%)</title><rect x="7.8295%" y="373" width="0.0268%" height="15" fill="rgb(235,201,11)"/><text x="8.0795%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.03%)</title><rect x="7.8295%" y="357" width="0.0268%" height="15" fill="rgb(207,46,11)"/><text x="8.0795%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.03%)</title><rect x="7.8295%" y="341" width="0.0268%" height="15" fill="rgb(241,35,35)"/><text x="8.0795%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2 samples, 0.03%)</title><rect x="7.8295%" y="325" width="0.0268%" height="15" fill="rgb(243,32,47)"/><text x="8.0795%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="7.8295%" y="309" width="0.0268%" height="15" fill="rgb(247,202,23)"/><text x="8.0795%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (1 samples, 0.01%)</title><rect x="7.8429%" y="293" width="0.0134%" height="15" fill="rgb(219,102,11)"/><text x="8.0929%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (1 samples, 0.01%)</title><rect x="7.8429%" y="277" width="0.0134%" height="15" fill="rgb(243,110,44)"/><text x="8.0929%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i32 (1 samples, 0.01%)</title><rect x="7.8429%" y="261" width="0.0134%" height="15" fill="rgb(222,74,54)"/><text x="8.0929%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.01%)</title><rect x="7.8429%" y="245" width="0.0134%" height="15" fill="rgb(216,99,12)"/><text x="8.0929%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.8429%" y="229" width="0.0134%" height="15" fill="rgb(226,22,26)"/><text x="8.0929%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.8429%" y="213" width="0.0134%" height="15" fill="rgb(217,163,10)"/><text x="8.0929%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="7.8429%" y="197" width="0.0134%" height="15" fill="rgb(213,25,53)"/><text x="8.0929%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="7.8429%" y="181" width="0.0134%" height="15" fill="rgb(252,105,26)"/><text x="8.0929%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="7.8563%" y="389" width="0.0134%" height="15" fill="rgb(220,39,43)"/><text x="8.1063%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="7.8563%" y="373" width="0.0134%" height="15" fill="rgb(229,68,48)"/><text x="8.1063%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="7.8563%" y="357" width="0.0134%" height="15" fill="rgb(252,8,32)"/><text x="8.1063%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="7.8563%" y="341" width="0.0134%" height="15" fill="rgb(223,20,43)"/><text x="8.1063%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="7.8563%" y="325" width="0.0134%" height="15" fill="rgb(229,81,49)"/><text x="8.1063%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="7.8563%" y="309" width="0.0134%" height="15" fill="rgb(236,28,36)"/><text x="8.1063%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.01%)</title><rect x="7.8563%" y="293" width="0.0134%" height="15" fill="rgb(249,185,26)"/><text x="8.1063%" y="303.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_constraints_file_to_struct::{{closure}} (1 samples, 0.01%)</title><rect x="7.8563%" y="277" width="0.0134%" height="15" fill="rgb(249,174,33)"/><text x="8.1063%" y="287.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.01%)</title><rect x="7.8563%" y="261" width="0.0134%" height="15" fill="rgb(233,201,37)"/><text x="8.1063%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.01%)</title><rect x="7.8563%" y="245" width="0.0134%" height="15" fill="rgb(221,78,26)"/><text x="8.1063%" y="255.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.01%)</title><rect x="7.8563%" y="229" width="0.0134%" height="15" fill="rgb(250,127,30)"/><text x="8.1063%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.01%)</title><rect x="7.8563%" y="213" width="0.0134%" height="15" fill="rgb(230,49,44)"/><text x="8.1063%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.01%)</title><rect x="7.8563%" y="197" width="0.0134%" height="15" fill="rgb(229,67,23)"/><text x="8.1063%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="7.8563%" y="181" width="0.0134%" height="15" fill="rgb(249,83,47)"/><text x="8.1063%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.8563%" y="165" width="0.0134%" height="15" fill="rgb(215,43,3)"/><text x="8.1063%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.8563%" y="149" width="0.0134%" height="15" fill="rgb(238,154,13)"/><text x="8.1063%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="7.8563%" y="133" width="0.0134%" height="15" fill="rgb(219,56,2)"/><text x="8.1063%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="7.8563%" y="117" width="0.0134%" height="15" fill="rgb(233,0,4)"/><text x="8.1063%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.01%)</title><rect x="7.8563%" y="101" width="0.0134%" height="15" fill="rgb(235,30,7)"/><text x="8.1063%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="7.8563%" y="85" width="0.0134%" height="15" fill="rgb(250,79,13)"/><text x="8.1063%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="7.8563%" y="69" width="0.0134%" height="15" fill="rgb(211,146,34)"/><text x="8.1063%" y="79.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="7.8563%" y="53" width="0.0134%" height="15" fill="rgb(228,22,38)"/><text x="8.1063%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="7.8563%" y="37" width="0.0134%" height="15" fill="rgb(235,168,5)"/><text x="8.1063%" y="47.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_constraints_file_to_struct (8 samples, 0.11%)</title><rect x="7.7892%" y="421" width="0.1073%" height="15" fill="rgb(221,155,16)"/><text x="8.0392%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.04%)</title><rect x="7.8563%" y="405" width="0.0402%" height="15" fill="rgb(215,215,53)"/><text x="8.1063%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="7.8697%" y="389" width="0.0268%" height="15" fill="rgb(223,4,10)"/><text x="8.1197%" y="399.50"></text></g><g><title>core::iter::adapters::process_results (2 samples, 0.03%)</title><rect x="7.8697%" y="373" width="0.0268%" height="15" fill="rgb(234,103,6)"/><text x="8.1197%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (2 samples, 0.03%)</title><rect x="7.8697%" y="357" width="0.0268%" height="15" fill="rgb(227,97,0)"/><text x="8.1197%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.03%)</title><rect x="7.8697%" y="341" width="0.0268%" height="15" fill="rgb(234,150,53)"/><text x="8.1197%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="7.8697%" y="325" width="0.0268%" height="15" fill="rgb(228,201,54)"/><text x="8.1197%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="7.8697%" y="309" width="0.0268%" height="15" fill="rgb(222,22,37)"/><text x="8.1197%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="7.8697%" y="293" width="0.0268%" height="15" fill="rgb(237,53,32)"/><text x="8.1197%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2 samples, 0.03%)</title><rect x="7.8697%" y="277" width="0.0268%" height="15" fill="rgb(233,25,53)"/><text x="8.1197%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="7.8697%" y="261" width="0.0268%" height="15" fill="rgb(210,40,34)"/><text x="8.1197%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.03%)</title><rect x="7.8697%" y="245" width="0.0268%" height="15" fill="rgb(241,220,44)"/><text x="8.1197%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.03%)</title><rect x="7.8697%" y="229" width="0.0268%" height="15" fill="rgb(235,28,35)"/><text x="8.1197%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.03%)</title><rect x="7.8697%" y="213" width="0.0268%" height="15" fill="rgb(210,56,17)"/><text x="8.1197%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.03%)</title><rect x="7.8697%" y="197" width="0.0268%" height="15" fill="rgb(224,130,29)"/><text x="8.1197%" y="207.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (2 samples, 0.03%)</title><rect x="7.8697%" y="181" width="0.0268%" height="15" fill="rgb(235,212,8)"/><text x="8.1197%" y="191.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_constraints_file_to_struct::{{closure}} (2 samples, 0.03%)</title><rect x="7.8697%" y="165" width="0.0268%" height="15" fill="rgb(223,33,50)"/><text x="8.1197%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="7.8697%" y="149" width="0.0268%" height="15" fill="rgb(219,149,13)"/><text x="8.1197%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="7.8697%" y="133" width="0.0268%" height="15" fill="rgb(250,156,29)"/><text x="8.1197%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="7.8697%" y="117" width="0.0268%" height="15" fill="rgb(216,193,19)"/><text x="8.1197%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="7.8697%" y="101" width="0.0268%" height="15" fill="rgb(216,135,14)"/><text x="8.1197%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.03%)</title><rect x="7.8697%" y="85" width="0.0268%" height="15" fill="rgb(241,47,5)"/><text x="8.1197%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="7.8697%" y="69" width="0.0268%" height="15" fill="rgb(233,42,35)"/><text x="8.1197%" y="79.50"></text></g><g><title>__GI___libc_free (2 samples, 0.03%)</title><rect x="7.8697%" y="53" width="0.0268%" height="15" fill="rgb(231,13,6)"/><text x="8.1197%" y="63.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="7.8697%" y="37" width="0.0268%" height="15" fill="rgb(207,181,40)"/><text x="8.1197%" y="47.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_data_file_to_struct (1 samples, 0.01%)</title><rect x="7.8965%" y="421" width="0.0134%" height="15" fill="rgb(254,173,49)"/><text x="8.1465%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.01%)</title><rect x="7.8965%" y="405" width="0.0134%" height="15" fill="rgb(221,1,38)"/><text x="8.1465%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="7.8965%" y="389" width="0.0134%" height="15" fill="rgb(206,124,46)"/><text x="8.1465%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="7.8965%" y="373" width="0.0134%" height="15" fill="rgb(249,21,11)"/><text x="8.1465%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.01%)</title><rect x="7.8965%" y="357" width="0.0134%" height="15" fill="rgb(222,201,40)"/><text x="8.1465%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="7.8965%" y="341" width="0.0134%" height="15" fill="rgb(235,61,29)"/><text x="8.1465%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="7.8965%" y="325" width="0.0134%" height="15" fill="rgb(219,207,3)"/><text x="8.1465%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.01%)</title><rect x="7.8965%" y="309" width="0.0134%" height="15" fill="rgb(222,56,46)"/><text x="8.1465%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.01%)</title><rect x="7.8965%" y="293" width="0.0134%" height="15" fill="rgb(239,76,54)"/><text x="8.1465%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="7.8965%" y="277" width="0.0134%" height="15" fill="rgb(231,124,27)"/><text x="8.1465%" y="287.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="7.8965%" y="261" width="0.0134%" height="15" fill="rgb(249,195,6)"/><text x="8.1465%" y="271.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="7.8965%" y="245" width="0.0134%" height="15" fill="rgb(237,174,47)"/><text x="8.1465%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="7.8965%" y="229" width="0.0134%" height="15" fill="rgb(206,201,31)"/><text x="8.1465%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (2 samples, 0.03%)</title><rect x="7.9099%" y="325" width="0.0268%" height="15" fill="rgb(231,57,52)"/><text x="8.1599%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.01%)</title><rect x="7.9233%" y="309" width="0.0134%" height="15" fill="rgb(248,177,22)"/><text x="8.1733%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (1 samples, 0.01%)</title><rect x="7.9233%" y="293" width="0.0134%" height="15" fill="rgb(215,211,37)"/><text x="8.1733%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.9233%" y="277" width="0.0134%" height="15" fill="rgb(241,128,51)"/><text x="8.1733%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="7.9233%" y="261" width="0.0134%" height="15" fill="rgb(227,165,31)"/><text x="8.1733%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="7.9233%" y="245" width="0.0134%" height="15" fill="rgb(228,167,24)"/><text x="8.1733%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="7.9233%" y="229" width="0.0134%" height="15" fill="rgb(228,143,12)"/><text x="8.1733%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.01%)</title><rect x="7.9233%" y="213" width="0.0134%" height="15" fill="rgb(249,149,8)"/><text x="8.1733%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="7.9233%" y="197" width="0.0134%" height="15" fill="rgb(243,35,44)"/><text x="8.1733%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="7.9233%" y="181" width="0.0134%" height="15" fill="rgb(246,89,9)"/><text x="8.1733%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="7.9233%" y="165" width="0.0134%" height="15" fill="rgb(233,213,13)"/><text x="8.1733%" y="175.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::generate_random_solution (3 samples, 0.04%)</title><rect x="7.9099%" y="405" width="0.0402%" height="15" fill="rgb(233,141,41)"/><text x="8.1599%" y="415.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::new (3 samples, 0.04%)</title><rect x="7.9099%" y="389" width="0.0402%" height="15" fill="rgb(239,167,4)"/><text x="8.1599%" y="399.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::max_distance_among_two (3 samples, 0.04%)</title><rect x="7.9099%" y="373" width="0.0402%" height="15" fill="rgb(209,217,16)"/><text x="8.1599%" y="383.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (3 samples, 0.04%)</title><rect x="7.9099%" y="357" width="0.0402%" height="15" fill="rgb(219,88,35)"/><text x="8.1599%" y="367.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (3 samples, 0.04%)</title><rect x="7.9099%" y="341" width="0.0402%" height="15" fill="rgb(220,193,23)"/><text x="8.1599%" y="351.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (1 samples, 0.01%)</title><rect x="7.9367%" y="325" width="0.0134%" height="15" fill="rgb(230,90,52)"/><text x="8.1867%" y="335.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (1 samples, 0.01%)</title><rect x="7.9367%" y="309" width="0.0134%" height="15" fill="rgb(252,106,19)"/><text x="8.1867%" y="319.50"></text></g><g><title>core::intrinsics::copy (7 samples, 0.09%)</title><rect x="8.0172%" y="341" width="0.0938%" height="15" fill="rgb(206,74,20)"/><text x="8.2672%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (16 samples, 0.21%)</title><rect x="7.9769%" y="373" width="0.2145%" height="15" fill="rgb(230,138,44)"/><text x="8.2269%" y="383.50"></text></g><g><title>core::ptr::swap (13 samples, 0.17%)</title><rect x="8.0172%" y="357" width="0.1743%" height="15" fill="rgb(235,182,43)"/><text x="8.2672%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.08%)</title><rect x="8.1110%" y="341" width="0.0804%" height="15" fill="rgb(242,16,51)"/><text x="8.3610%" y="351.50"></text></g><g><title>&lt;u32 as rand::distributions::utils::WideningMultiply&gt;::wmul (5 samples, 0.07%)</title><rect x="8.2987%" y="293" width="0.0670%" height="15" fill="rgb(248,9,4)"/><text x="8.5487%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="8.3657%" y="293" width="0.0402%" height="15" fill="rgb(210,31,22)"/><text x="8.6157%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2 samples, 0.03%)</title><rect x="8.4060%" y="293" width="0.0268%" height="15" fill="rgb(239,54,39)"/><text x="8.6560%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.01%)</title><rect x="8.8216%" y="117" width="0.0134%" height="15" fill="rgb(230,99,41)"/><text x="9.0716%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt;&gt;::from_lanes (1 samples, 0.01%)</title><rect x="8.8618%" y="101" width="0.0134%" height="15" fill="rgb(253,106,12)"/><text x="9.1118%" y="111.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (1 samples, 0.01%)</title><rect x="8.8618%" y="85" width="0.0134%" height="15" fill="rgb(213,46,41)"/><text x="9.1118%" y="95.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (1 samples, 0.01%)</title><rect x="8.8618%" y="69" width="0.0134%" height="15" fill="rgb(215,133,35)"/><text x="9.1118%" y="79.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (1 samples, 0.01%)</title><rect x="8.8618%" y="53" width="0.0134%" height="15" fill="rgb(213,28,5)"/><text x="9.1118%" y="63.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (3 samples, 0.04%)</title><rect x="8.8752%" y="101" width="0.0402%" height="15" fill="rgb(215,77,49)"/><text x="9.1252%" y="111.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (3 samples, 0.04%)</title><rect x="8.8752%" y="85" width="0.0402%" height="15" fill="rgb(248,100,22)"/><text x="9.1252%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.03%)</title><rect x="8.9154%" y="85" width="0.0268%" height="15" fill="rgb(208,67,9)"/><text x="9.1654%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.03%)</title><rect x="8.9154%" y="69" width="0.0268%" height="15" fill="rgb(219,133,21)"/><text x="9.1654%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (2 samples, 0.03%)</title><rect x="8.9154%" y="53" width="0.0268%" height="15" fill="rgb(246,46,29)"/><text x="9.1654%" y="63.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (1 samples, 0.01%)</title><rect x="8.9422%" y="85" width="0.0134%" height="15" fill="rgb(246,185,52)"/><text x="9.1922%" y="95.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (1 samples, 0.01%)</title><rect x="8.9422%" y="69" width="0.0134%" height="15" fill="rgb(252,136,11)"/><text x="9.1922%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (2 samples, 0.03%)</title><rect x="8.9556%" y="85" width="0.0268%" height="15" fill="rgb(219,138,53)"/><text x="9.2056%" y="95.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (2 samples, 0.03%)</title><rect x="8.9556%" y="69" width="0.0268%" height="15" fill="rgb(211,51,23)"/><text x="9.2056%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.03%)</title><rect x="8.9824%" y="85" width="0.0268%" height="15" fill="rgb(247,221,28)"/><text x="9.2324%" y="95.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.03%)</title><rect x="8.9824%" y="69" width="0.0268%" height="15" fill="rgb(251,222,45)"/><text x="9.2324%" y="79.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (57 samples, 0.76%)</title><rect x="8.2585%" y="309" width="0.7642%" height="15" fill="rgb(217,162,53)"/><text x="8.5085%" y="319.50"></text></g><g><title>rand::rng::Rng::gen (44 samples, 0.59%)</title><rect x="8.4328%" y="293" width="0.5899%" height="15" fill="rgb(229,93,14)"/><text x="8.6828%" y="303.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (44 samples, 0.59%)</title><rect x="8.4328%" y="277" width="0.5899%" height="15" fill="rgb(209,67,49)"/><text x="8.6828%" y="287.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u32 (44 samples, 0.59%)</title><rect x="8.4328%" y="261" width="0.5899%" height="15" fill="rgb(213,87,29)"/><text x="8.6828%" y="271.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u32 (44 samples, 0.59%)</title><rect x="8.4328%" y="245" width="0.5899%" height="15" fill="rgb(205,151,52)"/><text x="8.6828%" y="255.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (44 samples, 0.59%)</title><rect x="8.4328%" y="229" width="0.5899%" height="15" fill="rgb(253,215,39)"/><text x="8.6828%" y="239.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (16 samples, 0.21%)</title><rect x="8.8082%" y="213" width="0.2145%" height="15" fill="rgb(221,220,41)"/><text x="9.0582%" y="223.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (16 samples, 0.21%)</title><rect x="8.8082%" y="197" width="0.2145%" height="15" fill="rgb(218,133,21)"/><text x="9.0582%" y="207.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (16 samples, 0.21%)</title><rect x="8.8082%" y="181" width="0.2145%" height="15" fill="rgb(221,193,43)"/><text x="9.0582%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide (15 samples, 0.20%)</title><rect x="8.8216%" y="165" width="0.2011%" height="15" fill="rgb(240,128,52)"/><text x="9.0716%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (15 samples, 0.20%)</title><rect x="8.8216%" y="149" width="0.2011%" height="15" fill="rgb(253,114,12)"/><text x="9.0716%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (15 samples, 0.20%)</title><rect x="8.8216%" y="133" width="0.2011%" height="15" fill="rgb(215,223,47)"/><text x="9.0716%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (14 samples, 0.19%)</title><rect x="8.8350%" y="117" width="0.1877%" height="15" fill="rgb(248,225,23)"/><text x="9.0850%" y="127.50"></text></g><g><title>rand_chacha::guts::round (8 samples, 0.11%)</title><rect x="8.9154%" y="101" width="0.1073%" height="15" fill="rgb(250,108,0)"/><text x="9.1654%" y="111.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.01%)</title><rect x="9.0093%" y="85" width="0.0134%" height="15" fill="rgb(228,208,7)"/><text x="9.2593%" y="95.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (1 samples, 0.01%)</title><rect x="9.0093%" y="69" width="0.0134%" height="15" fill="rgb(244,45,10)"/><text x="9.2593%" y="79.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (80 samples, 1.07%)</title><rect x="7.9769%" y="389" width="1.0725%" height="15" fill="rgb(207,125,25)"/><text x="8.2269%" y="399.50"></text></g><g><title>rand::seq::gen_index (64 samples, 0.86%)</title><rect x="8.1914%" y="373" width="0.8580%" height="15" fill="rgb(210,195,18)"/><text x="8.4414%" y="383.50"></text></g><g><title>rand::rng::Rng::gen_range (61 samples, 0.82%)</title><rect x="8.2317%" y="357" width="0.8178%" height="15" fill="rgb(249,80,12)"/><text x="8.4817%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (59 samples, 0.79%)</title><rect x="8.2585%" y="341" width="0.7910%" height="15" fill="rgb(221,65,9)"/><text x="8.5085%" y="351.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (59 samples, 0.79%)</title><rect x="8.2585%" y="325" width="0.7910%" height="15" fill="rgb(235,49,36)"/><text x="8.5085%" y="335.50"></text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.03%)</title><rect x="9.0227%" y="309" width="0.0268%" height="15" fill="rgb(225,32,20)"/><text x="9.2727%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.01%)</title><rect x="9.1031%" y="357" width="0.0134%" height="15" fill="rgb(215,141,46)"/><text x="9.3531%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="9.1031%" y="341" width="0.0134%" height="15" fill="rgb(250,160,47)"/><text x="9.3531%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.01%)</title><rect x="9.1031%" y="325" width="0.0134%" height="15" fill="rgb(216,222,40)"/><text x="9.3531%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="9.1031%" y="309" width="0.0134%" height="15" fill="rgb(234,217,39)"/><text x="9.3531%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="9.1031%" y="293" width="0.0134%" height="15" fill="rgb(207,178,40)"/><text x="9.3531%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.01%)</title><rect x="9.1031%" y="277" width="0.0134%" height="15" fill="rgb(221,136,13)"/><text x="9.3531%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.01%)</title><rect x="9.1031%" y="261" width="0.0134%" height="15" fill="rgb(249,199,10)"/><text x="9.3531%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="9.1031%" y="245" width="0.0134%" height="15" fill="rgb(249,222,13)"/><text x="9.3531%" y="255.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="9.1031%" y="229" width="0.0134%" height="15" fill="rgb(244,185,38)"/><text x="9.3531%" y="239.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="9.1031%" y="213" width="0.0134%" height="15" fill="rgb(236,202,9)"/><text x="9.3531%" y="223.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="9.1031%" y="197" width="0.0134%" height="15" fill="rgb(250,229,37)"/><text x="9.3531%" y="207.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::neighbour_generator::NeighbourGenerator::generate_all_neighbours (11 samples, 0.15%)</title><rect x="9.0495%" y="389" width="0.1475%" height="15" fill="rgb(206,174,23)"/><text x="9.2995%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (11 samples, 0.15%)</title><rect x="9.0495%" y="373" width="0.1475%" height="15" fill="rgb(211,33,43)"/><text x="9.2995%" y="383.50"></text></g><g><title>core::ptr::write (6 samples, 0.08%)</title><rect x="9.1165%" y="357" width="0.0804%" height="15" fill="rgb(245,58,50)"/><text x="9.3665%" y="367.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (7 samples, 0.09%)</title><rect x="9.2506%" y="357" width="0.0938%" height="15" fill="rgb(244,68,36)"/><text x="9.5006%" y="367.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="9.6528%" y="341" width="0.0402%" height="15" fill="rgb(232,229,15)"/><text x="9.9028%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.03%)</title><rect x="10.5644%" y="325" width="0.0268%" height="15" fill="rgb(254,30,23)"/><text x="10.8144%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="10.5644%" y="309" width="0.0268%" height="15" fill="rgb(235,160,14)"/><text x="10.8144%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="10.5644%" y="293" width="0.0268%" height="15" fill="rgb(212,155,44)"/><text x="10.8144%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="10.5644%" y="277" width="0.0268%" height="15" fill="rgb(226,2,50)"/><text x="10.8144%" y="287.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.07%)</title><rect x="10.5912%" y="325" width="0.0670%" height="15" fill="rgb(234,177,6)"/><text x="10.8412%" y="335.50"></text></g><g><title>&lt;T as ndarray::shape_builder::ShapeBuilder&gt;::into_shape (1 samples, 0.01%)</title><rect x="10.6717%" y="293" width="0.0134%" height="15" fill="rgb(217,24,9)"/><text x="10.9217%" y="303.50"></text></g><g><title>__calloc (24 samples, 0.32%)</title><rect x="10.7119%" y="165" width="0.3218%" height="15" fill="rgb(220,13,46)"/><text x="10.9619%" y="175.50"></text></g><g><title>_int_malloc (16 samples, 0.21%)</title><rect x="10.8191%" y="149" width="0.2145%" height="15" fill="rgb(239,221,27)"/><text x="11.0691%" y="159.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.05%)</title><rect x="11.0337%" y="165" width="0.0536%" height="15" fill="rgb(222,198,25)"/><text x="11.2837%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (3 samples, 0.04%)</title><rect x="11.0471%" y="149" width="0.0402%" height="15" fill="rgb(211,99,13)"/><text x="11.2971%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.42%)</title><rect x="10.6851%" y="229" width="0.4156%" height="15" fill="rgb(232,111,31)"/><text x="10.9351%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (31 samples, 0.42%)</title><rect x="10.6851%" y="213" width="0.4156%" height="15" fill="rgb(245,82,37)"/><text x="10.9351%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.42%)</title><rect x="10.6851%" y="197" width="0.4156%" height="15" fill="rgb(227,149,46)"/><text x="10.9351%" y="207.50"></text></g><g><title>alloc::alloc::alloc_zeroed (31 samples, 0.42%)</title><rect x="10.6851%" y="181" width="0.4156%" height="15" fill="rgb(218,36,50)"/><text x="10.9351%" y="191.50"></text></g><g><title>__rust_alloc_zeroed (1 samples, 0.01%)</title><rect x="11.0873%" y="165" width="0.0134%" height="15" fill="rgb(226,80,48)"/><text x="11.3373%" y="175.50"></text></g><g><title>alloc::vec::from_elem (33 samples, 0.44%)</title><rect x="10.6851%" y="293" width="0.4424%" height="15" fill="rgb(238,224,15)"/><text x="10.9351%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (33 samples, 0.44%)</title><rect x="10.6851%" y="277" width="0.4424%" height="15" fill="rgb(241,136,10)"/><text x="10.9351%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (33 samples, 0.44%)</title><rect x="10.6851%" y="261" width="0.4424%" height="15" fill="rgb(208,32,45)"/><text x="10.9351%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (33 samples, 0.44%)</title><rect x="10.6851%" y="245" width="0.4424%" height="15" fill="rgb(207,135,9)"/><text x="10.9351%" y="255.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (2 samples, 0.03%)</title><rect x="11.1007%" y="229" width="0.0268%" height="15" fill="rgb(206,86,44)"/><text x="11.3507%" y="239.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked (1 samples, 0.01%)</title><rect x="11.1275%" y="293" width="0.0134%" height="15" fill="rgb(245,177,15)"/><text x="11.3775%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="11.1275%" y="277" width="0.0134%" height="15" fill="rgb(206,64,50)"/><text x="11.3775%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="11.1275%" y="261" width="0.0134%" height="15" fill="rgb(234,36,40)"/><text x="11.3775%" y="271.50"></text></g><g><title>core::iter::adapters::filter_try_fold::{{closure}} (1 samples, 0.01%)</title><rect x="11.1275%" y="245" width="0.0134%" height="15" fill="rgb(213,64,8)"/><text x="11.3775%" y="255.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked::{{closure}} (1 samples, 0.01%)</title><rect x="11.1275%" y="229" width="0.0134%" height="15" fill="rgb(210,75,36)"/><text x="11.3775%" y="239.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.01%)</title><rect x="11.1945%" y="277" width="0.0134%" height="15" fill="rgb(229,88,21)"/><text x="11.4445%" y="287.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (1 samples, 0.01%)</title><rect x="11.1945%" y="261" width="0.0134%" height="15" fill="rgb(252,204,47)"/><text x="11.4445%" y="271.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (50 samples, 0.67%)</title><rect x="10.6717%" y="309" width="0.6703%" height="15" fill="rgb(208,77,27)"/><text x="10.9217%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (15 samples, 0.20%)</title><rect x="11.1409%" y="293" width="0.2011%" height="15" fill="rgb(221,76,26)"/><text x="11.3909%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (10 samples, 0.13%)</title><rect x="11.2079%" y="277" width="0.1341%" height="15" fill="rgb(225,139,18)"/><text x="11.4579%" y="287.50"></text></g><g><title>ndarray::extension::nonnull::nonnull_from_vec_data (1 samples, 0.01%)</title><rect x="11.3286%" y="261" width="0.0134%" height="15" fill="rgb(230,137,11)"/><text x="11.5786%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="11.3286%" y="245" width="0.0134%" height="15" fill="rgb(212,28,1)"/><text x="11.5786%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="11.3286%" y="229" width="0.0134%" height="15" fill="rgb(248,164,17)"/><text x="11.5786%" y="239.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (53 samples, 0.71%)</title><rect x="10.6583%" y="325" width="0.7106%" height="15" fill="rgb(222,171,42)"/><text x="10.9083%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (2 samples, 0.03%)</title><rect x="11.3420%" y="309" width="0.0268%" height="15" fill="rgb(243,84,45)"/><text x="11.5920%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::len (7 samples, 0.09%)</title><rect x="11.3688%" y="325" width="0.0938%" height="15" fill="rgb(252,49,23)"/><text x="11.6188%" y="335.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::size (7 samples, 0.09%)</title><rect x="11.3688%" y="309" width="0.0938%" height="15" fill="rgb(215,19,7)"/><text x="11.6188%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.13%)</title><rect x="12.0660%" y="293" width="0.1341%" height="15" fill="rgb(238,81,41)"/><text x="12.3160%" y="303.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 0.13%)</title><rect x="12.0660%" y="277" width="0.1341%" height="15" fill="rgb(210,199,37)"/><text x="12.3160%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.13%)</title><rect x="12.0660%" y="261" width="0.1341%" height="15" fill="rgb(244,192,49)"/><text x="12.3160%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (4 samples, 0.05%)</title><rect x="12.1464%" y="245" width="0.0536%" height="15" fill="rgb(226,211,11)"/><text x="12.3964%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (73 samples, 0.98%)</title><rect x="13.5943%" y="261" width="0.9787%" height="15" fill="rgb(236,162,54)"/><text x="13.8443%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 1.14%)</title><rect x="13.5943%" y="277" width="1.1396%" height="15" fill="rgb(220,229,9)"/><text x="13.8443%" y="287.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (12 samples, 0.16%)</title><rect x="14.5730%" y="261" width="0.1609%" height="15" fill="rgb(250,87,22)"/><text x="14.8230%" y="271.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.03%)</title><rect x="14.7339%" y="197" width="0.0268%" height="15" fill="rgb(239,43,17)"/><text x="14.9839%" y="207.50"></text></g><g><title>core::cmp::min (5 samples, 0.07%)</title><rect x="14.7339%" y="229" width="0.0670%" height="15" fill="rgb(231,177,25)"/><text x="14.9839%" y="239.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.07%)</title><rect x="14.7339%" y="213" width="0.0670%" height="15" fill="rgb(219,179,1)"/><text x="14.9839%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (3 samples, 0.04%)</title><rect x="14.7607%" y="197" width="0.0402%" height="15" fill="rgb(238,219,53)"/><text x="15.0107%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (6 samples, 0.08%)</title><rect x="14.8009%" y="213" width="0.0804%" height="15" fill="rgb(232,167,36)"/><text x="15.0509%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (12 samples, 0.16%)</title><rect x="14.7339%" y="277" width="0.1609%" height="15" fill="rgb(244,19,51)"/><text x="14.9839%" y="287.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (12 samples, 0.16%)</title><rect x="14.7339%" y="261" width="0.1609%" height="15" fill="rgb(224,6,22)"/><text x="14.9839%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (12 samples, 0.16%)</title><rect x="14.7339%" y="245" width="0.1609%" height="15" fill="rgb(224,145,5)"/><text x="14.9839%" y="255.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccess::size (7 samples, 0.09%)</title><rect x="14.8009%" y="229" width="0.0938%" height="15" fill="rgb(234,130,49)"/><text x="15.0509%" y="239.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.01%)</title><rect x="14.8814%" y="213" width="0.0134%" height="15" fill="rgb(254,6,2)"/><text x="15.1314%" y="223.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent (14 samples, 0.19%)</title><rect x="14.8948%" y="277" width="0.1877%" height="15" fill="rgb(208,96,46)"/><text x="15.1448%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (14 samples, 0.19%)</title><rect x="14.8948%" y="261" width="0.1877%" height="15" fill="rgb(239,3,39)"/><text x="15.1448%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.19%)</title><rect x="14.8948%" y="245" width="0.1877%" height="15" fill="rgb(233,210,1)"/><text x="15.1448%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.19%)</title><rect x="14.8948%" y="229" width="0.1877%" height="15" fill="rgb(244,137,37)"/><text x="15.1448%" y="239.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (14 samples, 0.19%)</title><rect x="14.8948%" y="213" width="0.1877%" height="15" fill="rgb(240,136,2)"/><text x="15.1448%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (14 samples, 0.19%)</title><rect x="14.8948%" y="197" width="0.1877%" height="15" fill="rgb(239,18,37)"/><text x="15.1448%" y="207.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent::{{closure}} (14 samples, 0.19%)</title><rect x="14.8948%" y="181" width="0.1877%" height="15" fill="rgb(218,185,22)"/><text x="15.1448%" y="191.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (17 samples, 0.23%)</title><rect x="15.0825%" y="277" width="0.2279%" height="15" fill="rgb(225,218,4)"/><text x="15.3325%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (16 samples, 0.21%)</title><rect x="15.0959%" y="261" width="0.2145%" height="15" fill="rgb(230,182,32)"/><text x="15.3459%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (16 samples, 0.21%)</title><rect x="15.0959%" y="245" width="0.2145%" height="15" fill="rgb(242,56,43)"/><text x="15.3459%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (16 samples, 0.21%)</title><rect x="15.0959%" y="229" width="0.2145%" height="15" fill="rgb(233,99,24)"/><text x="15.3459%" y="239.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (8 samples, 0.11%)</title><rect x="15.3238%" y="229" width="0.1073%" height="15" fill="rgb(234,209,42)"/><text x="15.5738%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order_mut (17 samples, 0.23%)</title><rect x="15.3104%" y="277" width="0.2279%" height="15" fill="rgb(227,7,12)"/><text x="15.5604%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (16 samples, 0.21%)</title><rect x="15.3238%" y="261" width="0.2145%" height="15" fill="rgb(245,203,43)"/><text x="15.5738%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (16 samples, 0.21%)</title><rect x="15.3238%" y="245" width="0.2145%" height="15" fill="rgb(238,205,33)"/><text x="15.5738%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::equal (8 samples, 0.11%)</title><rect x="15.4310%" y="229" width="0.1073%" height="15" fill="rgb(231,56,7)"/><text x="15.6810%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (5 samples, 0.07%)</title><rect x="15.5383%" y="277" width="0.0670%" height="15" fill="rgb(244,186,29)"/><text x="15.7883%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (306 samples, 4.10%)</title><rect x="12.2000%" y="293" width="4.1024%" height="15" fill="rgb(234,111,31)"/><text x="12.4500%" y="303.50">ndar..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add::{{closure}} (52 samples, 0.70%)</title><rect x="15.6053%" y="277" width="0.6971%" height="15" fill="rgb(241,149,10)"/><text x="15.8553%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (42 samples, 0.56%)</title><rect x="15.7394%" y="261" width="0.5631%" height="15" fill="rgb(249,206,44)"/><text x="15.9894%" y="271.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (369 samples, 4.95%)</title><rect x="11.4627%" y="325" width="4.9470%" height="15" fill="rgb(251,153,30)"/><text x="11.7127%" y="335.50">ndarra..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (346 samples, 4.64%)</title><rect x="11.7710%" y="309" width="4.6387%" height="15" fill="rgb(239,152,38)"/><text x="12.0210%" y="319.50">ndarr..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (8 samples, 0.11%)</title><rect x="16.3025%" y="293" width="0.1073%" height="15" fill="rgb(249,139,47)"/><text x="16.5525%" y="303.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.08%)</title><rect x="16.4365%" y="277" width="0.0804%" height="15" fill="rgb(244,64,35)"/><text x="16.6865%" y="287.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (12 samples, 0.16%)</title><rect x="16.4365%" y="293" width="0.1609%" height="15" fill="rgb(216,46,15)"/><text x="16.6865%" y="303.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div::{{closure}} (6 samples, 0.08%)</title><rect x="16.5170%" y="277" width="0.0804%" height="15" fill="rgb(250,74,19)"/><text x="16.7670%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (4 samples, 0.05%)</title><rect x="16.5438%" y="261" width="0.0536%" height="15" fill="rgb(249,42,33)"/><text x="16.7938%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.01%)</title><rect x="16.5974%" y="293" width="0.0134%" height="15" fill="rgb(242,149,17)"/><text x="16.8474%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.01%)</title><rect x="16.5974%" y="277" width="0.0134%" height="15" fill="rgb(244,29,21)"/><text x="16.8474%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="16.5974%" y="261" width="0.0134%" height="15" fill="rgb(220,130,37)"/><text x="16.8474%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order_mut (2 samples, 0.03%)</title><rect x="16.6108%" y="293" width="0.0268%" height="15" fill="rgb(211,67,2)"/><text x="16.8608%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (2 samples, 0.03%)</title><rect x="16.6108%" y="277" width="0.0268%" height="15" fill="rgb(235,68,52)"/><text x="16.8608%" y="287.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.03%)</title><rect x="16.6108%" y="261" width="0.0268%" height="15" fill="rgb(246,142,3)"/><text x="16.8608%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (2 samples, 0.03%)</title><rect x="16.6108%" y="245" width="0.0268%" height="15" fill="rgb(241,25,7)"/><text x="16.8608%" y="255.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::calculate_centroid (519 samples, 6.96%)</title><rect x="9.6930%" y="341" width="6.9580%" height="15" fill="rgb(242,119,39)"/><text x="9.9430%" y="351.50">Practicas..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (18 samples, 0.24%)</title><rect x="16.4097%" y="325" width="0.2413%" height="15" fill="rgb(241,98,45)"/><text x="16.6597%" y="335.50"></text></g><g><title>ndarray::ArrayBase&lt;S,D&gt;::unordered_foreach_mut (16 samples, 0.21%)</title><rect x="16.4365%" y="309" width="0.2145%" height="15" fill="rgb(254,28,30)"/><text x="16.6865%" y="319.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (1 samples, 0.01%)</title><rect x="16.6376%" y="293" width="0.0134%" height="15" fill="rgb(241,142,54)"/><text x="16.8876%" y="303.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (8 samples, 0.11%)</title><rect x="16.7315%" y="325" width="0.1073%" height="15" fill="rgb(222,85,15)"/><text x="16.9815%" y="335.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (28 samples, 0.38%)</title><rect x="16.8387%" y="197" width="0.3754%" height="15" fill="rgb(210,85,47)"/><text x="17.0887%" y="207.50"></text></g><g><title>__GI___libc_free (395 samples, 5.30%)</title><rect x="17.4822%" y="181" width="5.2956%" height="15" fill="rgb(224,206,25)"/><text x="17.7322%" y="191.50">__GI__..</text></g><g><title>_int_free (262 samples, 3.51%)</title><rect x="19.2653%" y="165" width="3.5125%" height="15" fill="rgb(243,201,19)"/><text x="19.5153%" y="175.50">_in..</text></g><g><title>__rdl_dealloc (14 samples, 0.19%)</title><rect x="22.7779%" y="181" width="0.1877%" height="15" fill="rgb(236,59,4)"/><text x="23.0279%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.19%)</title><rect x="22.7779%" y="165" width="0.1877%" height="15" fill="rgb(254,179,45)"/><text x="23.0279%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (468 samples, 6.27%)</title><rect x="16.8387%" y="261" width="6.2743%" height="15" fill="rgb(226,14,10)"/><text x="17.0887%" y="271.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (468 samples, 6.27%)</title><rect x="16.8387%" y="245" width="6.2743%" height="15" fill="rgb(244,27,41)"/><text x="17.0887%" y="255.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (468 samples, 6.27%)</title><rect x="16.8387%" y="229" width="6.2743%" height="15" fill="rgb(235,35,32)"/><text x="17.0887%" y="239.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (468 samples, 6.27%)</title><rect x="16.8387%" y="213" width="6.2743%" height="15" fill="rgb(218,68,31)"/><text x="17.0887%" y="223.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (440 samples, 5.90%)</title><rect x="17.2141%" y="197" width="5.8989%" height="15" fill="rgb(207,120,37)"/><text x="17.4641%" y="207.50">alloc::..</text></g><g><title>__rust_dealloc (11 samples, 0.15%)</title><rect x="22.9655%" y="181" width="0.1475%" height="15" fill="rgb(227,98,0)"/><text x="23.2155%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (496 samples, 6.65%)</title><rect x="16.8387%" y="309" width="6.6497%" height="15" fill="rgb(207,7,3)"/><text x="17.0887%" y="319.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place (496 samples, 6.65%)</title><rect x="16.8387%" y="293" width="6.6497%" height="15" fill="rgb(206,98,19)"/><text x="17.0887%" y="303.50">core::ptr..</text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (496 samples, 6.65%)</title><rect x="16.8387%" y="277" width="6.6497%" height="15" fill="rgb(217,5,26)"/><text x="17.0887%" y="287.50">&lt;ndarray:..</text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::take_as_vec (28 samples, 0.38%)</title><rect x="23.1130%" y="261" width="0.3754%" height="15" fill="rgb(235,190,38)"/><text x="23.3630%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;I&gt; as core::clone::Clone&gt;::clone (11 samples, 0.15%)</title><rect x="23.9174%" y="277" width="0.1475%" height="15" fill="rgb(247,86,24)"/><text x="24.1674%" y="287.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (10 samples, 0.13%)</title><rect x="24.0649%" y="277" width="0.1341%" height="15" fill="rgb(205,101,16)"/><text x="24.3149%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (1 samples, 0.01%)</title><rect x="24.1990%" y="277" width="0.0134%" height="15" fill="rgb(246,168,33)"/><text x="24.4490%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (1 samples, 0.01%)</title><rect x="24.1990%" y="261" width="0.0134%" height="15" fill="rgb(231,114,1)"/><text x="24.4490%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.01%)</title><rect x="24.1990%" y="245" width="0.0134%" height="15" fill="rgb(207,184,53)"/><text x="24.4490%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::equal (1 samples, 0.01%)</title><rect x="24.1990%" y="229" width="0.0134%" height="15" fill="rgb(224,95,51)"/><text x="24.4490%" y="239.50"></text></g><g><title>__GI___libc_malloc (153 samples, 2.05%)</title><rect x="24.3866%" y="149" width="2.0512%" height="15" fill="rgb(212,188,45)"/><text x="24.6366%" y="159.50">_..</text></g><g><title>__rdl_alloc (18 samples, 0.24%)</title><rect x="26.4379%" y="149" width="0.2413%" height="15" fill="rgb(223,154,38)"/><text x="26.6879%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.24%)</title><rect x="26.4379%" y="133" width="0.2413%" height="15" fill="rgb(251,22,52)"/><text x="26.6879%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (188 samples, 2.52%)</title><rect x="24.3464%" y="213" width="2.5204%" height="15" fill="rgb(229,209,22)"/><text x="24.5964%" y="223.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (188 samples, 2.52%)</title><rect x="24.3464%" y="197" width="2.5204%" height="15" fill="rgb(234,138,34)"/><text x="24.5964%" y="207.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (188 samples, 2.52%)</title><rect x="24.3464%" y="181" width="2.5204%" height="15" fill="rgb(212,95,11)"/><text x="24.5964%" y="191.50">al..</text></g><g><title>alloc::alloc::alloc (185 samples, 2.48%)</title><rect x="24.3866%" y="165" width="2.4802%" height="15" fill="rgb(240,179,47)"/><text x="24.6366%" y="175.50">al..</text></g><g><title>__rust_alloc (14 samples, 0.19%)</title><rect x="26.6792%" y="149" width="0.1877%" height="15" fill="rgb(240,163,11)"/><text x="26.9292%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (211 samples, 2.83%)</title><rect x="24.2124%" y="261" width="2.8288%" height="15" fill="rgb(236,37,12)"/><text x="24.4624%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (201 samples, 2.69%)</title><rect x="24.3464%" y="245" width="2.6947%" height="15" fill="rgb(232,164,16)"/><text x="24.5964%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (201 samples, 2.69%)</title><rect x="24.3464%" y="229" width="2.6947%" height="15" fill="rgb(244,205,15)"/><text x="24.5964%" y="239.50">al..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (13 samples, 0.17%)</title><rect x="26.8669%" y="213" width="0.1743%" height="15" fill="rgb(223,117,47)"/><text x="27.1169%" y="223.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.67%)</title><rect x="27.0680%" y="245" width="0.6703%" height="15" fill="rgb(244,107,35)"/><text x="27.3180%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (5 samples, 0.07%)</title><rect x="27.7383%" y="245" width="0.0670%" height="15" fill="rgb(205,140,8)"/><text x="27.9883%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (1 samples, 0.01%)</title><rect x="27.8053%" y="229" width="0.0134%" height="15" fill="rgb(228,84,46)"/><text x="28.0553%" y="239.50"></text></g><g><title>core::ptr::write (3 samples, 0.04%)</title><rect x="27.8187%" y="229" width="0.0402%" height="15" fill="rgb(254,188,9)"/><text x="28.0687%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (77 samples, 1.03%)</title><rect x="27.0412%" y="261" width="1.0323%" height="15" fill="rgb(206,112,54)"/><text x="27.2912%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::{{closure}} (20 samples, 0.27%)</title><rect x="27.8053%" y="245" width="0.2681%" height="15" fill="rgb(216,84,49)"/><text x="28.0553%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::{{closure}} (16 samples, 0.21%)</title><rect x="27.8590%" y="229" width="0.2145%" height="15" fill="rgb(214,194,35)"/><text x="28.1090%" y="239.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to::{{closure}} (16 samples, 0.21%)</title><rect x="27.8590%" y="213" width="0.2145%" height="15" fill="rgb(249,28,3)"/><text x="28.1090%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (319 samples, 4.28%)</title><rect x="23.8772%" y="293" width="4.2767%" height="15" fill="rgb(222,56,52)"/><text x="24.1272%" y="303.50">ndarr..</text></g><g><title>ndarray::iterators::to_vec_mapped (294 samples, 3.94%)</title><rect x="24.2124%" y="277" width="3.9415%" height="15" fill="rgb(245,217,50)"/><text x="24.4624%" y="287.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (6 samples, 0.08%)</title><rect x="28.0735%" y="261" width="0.0804%" height="15" fill="rgb(213,201,24)"/><text x="28.3235%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (548 samples, 7.35%)</title><rect x="23.4884%" y="309" width="7.3468%" height="15" fill="rgb(248,116,28)"/><text x="23.7384%" y="319.50">ndarray::i..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (200 samples, 2.68%)</title><rect x="28.1539%" y="293" width="2.6813%" height="15" fill="rgb(219,72,43)"/><text x="28.4039%" y="303.50">nd..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (10 samples, 0.13%)</title><rect x="31.0363%" y="213" width="0.1341%" height="15" fill="rgb(209,138,14)"/><text x="31.2863%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.08%)</title><rect x="31.0900%" y="197" width="0.0804%" height="15" fill="rgb(222,18,33)"/><text x="31.3400%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.08%)</title><rect x="31.0900%" y="181" width="0.0804%" height="15" fill="rgb(213,199,7)"/><text x="31.3400%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.08%)</title><rect x="31.0900%" y="165" width="0.0804%" height="15" fill="rgb(250,110,10)"/><text x="31.3400%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.08%)</title><rect x="31.0900%" y="149" width="0.0804%" height="15" fill="rgb(248,123,6)"/><text x="31.3400%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (14 samples, 0.19%)</title><rect x="31.1704%" y="213" width="0.1877%" height="15" fill="rgb(206,91,31)"/><text x="31.4204%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.04%)</title><rect x="31.3581%" y="213" width="0.0402%" height="15" fill="rgb(211,154,13)"/><text x="31.6081%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.04%)</title><rect x="31.3581%" y="197" width="0.0402%" height="15" fill="rgb(225,148,7)"/><text x="31.6081%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (80 samples, 1.07%)</title><rect x="31.3983%" y="213" width="1.0725%" height="15" fill="rgb(220,160,43)"/><text x="31.6483%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 1.07%)</title><rect x="31.3983%" y="197" width="1.0725%" height="15" fill="rgb(213,52,39)"/><text x="31.6483%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (80 samples, 1.07%)</title><rect x="31.3983%" y="181" width="1.0725%" height="15" fill="rgb(243,137,7)"/><text x="31.6483%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (117 samples, 1.57%)</title><rect x="30.9157%" y="245" width="1.5686%" height="15" fill="rgb(230,79,13)"/><text x="31.1657%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (117 samples, 1.57%)</title><rect x="30.9157%" y="229" width="1.5686%" height="15" fill="rgb(247,105,23)"/><text x="31.1657%" y="239.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::as_slice (1 samples, 0.01%)</title><rect x="32.4708%" y="213" width="0.0134%" height="15" fill="rgb(223,179,41)"/><text x="32.7208%" y="223.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::make_slice (1 samples, 0.01%)</title><rect x="32.4708%" y="197" width="0.0134%" height="15" fill="rgb(218,9,34)"/><text x="32.7208%" y="207.50"></text></g><g><title>__GI___libc_malloc (134 samples, 1.80%)</title><rect x="32.7926%" y="133" width="1.7965%" height="15" fill="rgb(222,106,8)"/><text x="33.0426%" y="143.50">_..</text></g><g><title>__rdl_alloc (23 samples, 0.31%)</title><rect x="34.5891%" y="133" width="0.3084%" height="15" fill="rgb(211,220,0)"/><text x="34.8391%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.31%)</title><rect x="34.5891%" y="117" width="0.3084%" height="15" fill="rgb(229,52,16)"/><text x="34.8391%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (178 samples, 2.39%)</title><rect x="32.6183%" y="181" width="2.3864%" height="15" fill="rgb(212,155,18)"/><text x="32.8683%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (178 samples, 2.39%)</title><rect x="32.6183%" y="165" width="2.3864%" height="15" fill="rgb(242,21,14)"/><text x="32.8683%" y="175.50">al..</text></g><g><title>alloc::alloc::alloc (170 samples, 2.28%)</title><rect x="32.7256%" y="149" width="2.2791%" height="15" fill="rgb(222,19,48)"/><text x="32.9756%" y="159.50">a..</text></g><g><title>__rust_alloc (8 samples, 0.11%)</title><rect x="34.8974%" y="133" width="0.1073%" height="15" fill="rgb(232,45,27)"/><text x="35.1474%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (190 samples, 2.55%)</title><rect x="32.6183%" y="197" width="2.5473%" height="15" fill="rgb(249,103,42)"/><text x="32.8683%" y="207.50">al..</text></g><g><title>core::alloc::layout::Layout::array (12 samples, 0.16%)</title><rect x="35.0047%" y="181" width="0.1609%" height="15" fill="rgb(246,81,33)"/><text x="35.2547%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (12 samples, 0.16%)</title><rect x="35.0047%" y="165" width="0.1609%" height="15" fill="rgb(252,33,42)"/><text x="35.2547%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3 samples, 0.04%)</title><rect x="35.1254%" y="149" width="0.0402%" height="15" fill="rgb(209,212,41)"/><text x="35.3754%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.04%)</title><rect x="35.1254%" y="133" width="0.0402%" height="15" fill="rgb(207,154,6)"/><text x="35.3754%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (319 samples, 4.28%)</title><rect x="30.9157%" y="277" width="4.2767%" height="15" fill="rgb(223,64,47)"/><text x="31.1657%" y="287.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (319 samples, 4.28%)</title><rect x="30.9157%" y="261" width="4.2767%" height="15" fill="rgb(211,161,38)"/><text x="31.1657%" y="271.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (202 samples, 2.71%)</title><rect x="32.4842%" y="245" width="2.7081%" height="15" fill="rgb(219,138,40)"/><text x="32.7342%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (192 samples, 2.57%)</title><rect x="32.6183%" y="229" width="2.5741%" height="15" fill="rgb(241,228,46)"/><text x="32.8683%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (192 samples, 2.57%)</title><rect x="32.6183%" y="213" width="2.5741%" height="15" fill="rgb(223,209,38)"/><text x="32.8683%" y="223.50">al..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (2 samples, 0.03%)</title><rect x="35.1656%" y="197" width="0.0268%" height="15" fill="rgb(236,164,45)"/><text x="35.4156%" y="207.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (51 samples, 0.68%)</title><rect x="35.1924%" y="277" width="0.6837%" height="15" fill="rgb(231,15,5)"/><text x="35.4424%" y="287.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (8 samples, 0.11%)</title><rect x="36.0102%" y="229" width="0.1073%" height="15" fill="rgb(252,35,15)"/><text x="36.2602%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (392 samples, 5.26%)</title><rect x="30.8755%" y="293" width="5.2554%" height="15" fill="rgb(248,181,18)"/><text x="31.1255%" y="303.50">ndarra..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (19 samples, 0.25%)</title><rect x="35.8761%" y="277" width="0.2547%" height="15" fill="rgb(233,39,42)"/><text x="36.1261%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (9 samples, 0.12%)</title><rect x="36.0102%" y="261" width="0.1207%" height="15" fill="rgb(238,110,33)"/><text x="36.2602%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (9 samples, 0.12%)</title><rect x="36.0102%" y="245" width="0.1207%" height="15" fill="rgb(233,195,10)"/><text x="36.2602%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::equal (1 samples, 0.01%)</title><rect x="36.1174%" y="229" width="0.0134%" height="15" fill="rgb(254,105,3)"/><text x="36.3674%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (214 samples, 2.87%)</title><rect x="36.1308%" y="293" width="2.8690%" height="15" fill="rgb(221,225,9)"/><text x="36.3808%" y="303.50">nd..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (69 samples, 0.93%)</title><rect x="39.9115%" y="229" width="0.9251%" height="15" fill="rgb(224,227,45)"/><text x="40.1615%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.95%)</title><rect x="39.9115%" y="245" width="0.9519%" height="15" fill="rgb(229,198,43)"/><text x="40.1615%" y="255.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (2 samples, 0.03%)</title><rect x="40.8366%" y="229" width="0.0268%" height="15" fill="rgb(206,209,35)"/><text x="41.0866%" y="239.50"></text></g><g><title>core::cmp::min_by (12 samples, 0.16%)</title><rect x="40.8634%" y="165" width="0.1609%" height="15" fill="rgb(245,195,53)"/><text x="41.1134%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (13 samples, 0.17%)</title><rect x="40.8634%" y="245" width="0.1743%" height="15" fill="rgb(240,92,26)"/><text x="41.1134%" y="255.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (13 samples, 0.17%)</title><rect x="40.8634%" y="229" width="0.1743%" height="15" fill="rgb(207,40,23)"/><text x="41.1134%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (13 samples, 0.17%)</title><rect x="40.8634%" y="213" width="0.1743%" height="15" fill="rgb(223,111,35)"/><text x="41.1134%" y="223.50"></text></g><g><title>core::cmp::min (13 samples, 0.17%)</title><rect x="40.8634%" y="197" width="0.1743%" height="15" fill="rgb(229,147,28)"/><text x="41.1134%" y="207.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.17%)</title><rect x="40.8634%" y="181" width="0.1743%" height="15" fill="rgb(211,29,28)"/><text x="41.1134%" y="191.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (1 samples, 0.01%)</title><rect x="41.0243%" y="165" width="0.0134%" height="15" fill="rgb(228,72,33)"/><text x="41.2743%" y="175.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent (15 samples, 0.20%)</title><rect x="41.0377%" y="245" width="0.2011%" height="15" fill="rgb(205,214,31)"/><text x="41.2877%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (15 samples, 0.20%)</title><rect x="41.0377%" y="229" width="0.2011%" height="15" fill="rgb(224,111,15)"/><text x="41.2877%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.20%)</title><rect x="41.0377%" y="213" width="0.2011%" height="15" fill="rgb(253,21,26)"/><text x="41.2877%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.20%)</title><rect x="41.0377%" y="197" width="0.2011%" height="15" fill="rgb(245,139,43)"/><text x="41.2877%" y="207.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (15 samples, 0.20%)</title><rect x="41.0377%" y="181" width="0.2011%" height="15" fill="rgb(252,170,7)"/><text x="41.2877%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (15 samples, 0.20%)</title><rect x="41.0377%" y="165" width="0.2011%" height="15" fill="rgb(231,118,14)"/><text x="41.2877%" y="175.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent::{{closure}} (15 samples, 0.20%)</title><rect x="41.0377%" y="149" width="0.2011%" height="15" fill="rgb(238,83,0)"/><text x="41.2877%" y="159.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (8 samples, 0.11%)</title><rect x="41.2388%" y="245" width="0.1073%" height="15" fill="rgb(221,39,39)"/><text x="41.4888%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (8 samples, 0.11%)</title><rect x="41.2388%" y="229" width="0.1073%" height="15" fill="rgb(222,119,46)"/><text x="41.4888%" y="239.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (8 samples, 0.11%)</title><rect x="41.2388%" y="213" width="0.1073%" height="15" fill="rgb(222,165,49)"/><text x="41.4888%" y="223.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (8 samples, 0.11%)</title><rect x="41.2388%" y="197" width="0.1073%" height="15" fill="rgb(219,113,52)"/><text x="41.4888%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (2 samples, 0.03%)</title><rect x="41.3460%" y="245" width="0.0268%" height="15" fill="rgb(214,7,15)"/><text x="41.5960%" y="255.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (811 samples, 10.87%)</title><rect x="30.8352%" y="309" width="10.8728%" height="15" fill="rgb(235,32,4)"/><text x="31.0852%" y="319.50">ndarray::impl_op..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (202 samples, 2.71%)</title><rect x="38.9999%" y="293" width="2.7081%" height="15" fill="rgb(238,90,54)"/><text x="39.2499%" y="303.50">nd..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (150 samples, 2.01%)</title><rect x="39.6970%" y="277" width="2.0110%" height="15" fill="rgb(213,208,19)"/><text x="39.9470%" y="287.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (150 samples, 2.01%)</title><rect x="39.6970%" y="261" width="2.0110%" height="15" fill="rgb(233,156,4)"/><text x="39.9470%" y="271.50">n..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub::{{closure}} (25 samples, 0.34%)</title><rect x="41.3728%" y="245" width="0.3352%" height="15" fill="rgb(207,194,5)"/><text x="41.6228%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (6 samples, 0.08%)</title><rect x="41.6276%" y="229" width="0.0804%" height="15" fill="rgb(206,111,30)"/><text x="41.8776%" y="239.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (16 samples, 0.21%)</title><rect x="41.7080%" y="229" width="0.2145%" height="15" fill="rgb(243,70,54)"/><text x="41.9580%" y="239.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (23 samples, 0.31%)</title><rect x="41.7080%" y="309" width="0.3084%" height="15" fill="rgb(242,28,8)"/><text x="41.9580%" y="319.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (23 samples, 0.31%)</title><rect x="41.7080%" y="293" width="0.3084%" height="15" fill="rgb(219,106,18)"/><text x="41.9580%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (23 samples, 0.31%)</title><rect x="41.7080%" y="277" width="0.3084%" height="15" fill="rgb(244,222,10)"/><text x="41.9580%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (23 samples, 0.31%)</title><rect x="41.7080%" y="261" width="0.3084%" height="15" fill="rgb(236,179,52)"/><text x="41.9580%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (23 samples, 0.31%)</title><rect x="41.7080%" y="245" width="0.3084%" height="15" fill="rgb(213,23,39)"/><text x="41.9580%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::equal (7 samples, 0.09%)</title><rect x="41.9225%" y="229" width="0.0938%" height="15" fill="rgb(238,48,10)"/><text x="42.1725%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.44%)</title><rect x="42.3515%" y="293" width="0.4424%" height="15" fill="rgb(251,196,23)"/><text x="42.6015%" y="303.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.44%)</title><rect x="42.3515%" y="277" width="0.4424%" height="15" fill="rgb(250,152,24)"/><text x="42.6015%" y="287.50"></text></g><g><title>ndarray::numeric_util::unrolled_fold (124 samples, 1.66%)</title><rect x="42.0164%" y="309" width="1.6624%" height="15" fill="rgb(209,150,17)"/><text x="42.2664%" y="319.50"></text></g><g><title>core::ops::function::Fn::call (66 samples, 0.88%)</title><rect x="42.7939%" y="293" width="0.8848%" height="15" fill="rgb(234,202,34)"/><text x="43.0439%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (66 samples, 0.88%)</title><rect x="42.7939%" y="277" width="0.8848%" height="15" fill="rgb(253,148,53)"/><text x="43.0439%" y="287.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (2,056 samples, 27.56%)</title><rect x="16.6510%" y="341" width="27.5640%" height="15" fill="rgb(218,129,16)"/><text x="16.9010%" y="351.50">PracticasMetaheuristicas::problem_datatypes:..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (2,042 samples, 27.38%)</title><rect x="16.8387%" y="325" width="27.3763%" height="15" fill="rgb(216,85,19)"/><text x="17.0887%" y="335.50">PracticasMetaheuristicas::problem_datatypes:..</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (40 samples, 0.54%)</title><rect x="43.6788%" y="309" width="0.5363%" height="15" fill="rgb(235,228,7)"/><text x="43.9288%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.27%)</title><rect x="48.5320%" y="309" width="0.2681%" height="15" fill="rgb(245,175,0)"/><text x="48.7820%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.42%)</title><rect x="48.5320%" y="325" width="0.4156%" height="15" fill="rgb(208,168,36)"/><text x="48.7820%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.15%)</title><rect x="48.8001%" y="309" width="0.1475%" height="15" fill="rgb(246,171,24)"/><text x="49.0501%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.15%)</title><rect x="48.8001%" y="293" width="0.1475%" height="15" fill="rgb(215,142,24)"/><text x="49.0501%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.72%)</title><rect x="48.9476%" y="325" width="0.7240%" height="15" fill="rgb(250,187,7)"/><text x="49.1976%" y="335.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.72%)</title><rect x="48.9476%" y="309" width="0.7240%" height="15" fill="rgb(228,66,33)"/><text x="49.1976%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="49.6715%" y="325" width="0.0268%" height="15" fill="rgb(234,215,21)"/><text x="49.9215%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (16 samples, 0.21%)</title><rect x="49.9665%" y="309" width="0.2145%" height="15" fill="rgb(222,191,20)"/><text x="50.2165%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.21%)</title><rect x="49.9665%" y="293" width="0.2145%" height="15" fill="rgb(245,79,54)"/><text x="50.2165%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="50.2882%" y="245" width="0.0134%" height="15" fill="rgb(240,10,37)"/><text x="50.5382%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.11%)</title><rect x="50.3016%" y="245" width="0.1073%" height="15" fill="rgb(214,192,32)"/><text x="50.5516%" y="255.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.11%)</title><rect x="50.3016%" y="229" width="0.1073%" height="15" fill="rgb(209,36,54)"/><text x="50.5516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (5 samples, 0.07%)</title><rect x="50.4089%" y="245" width="0.0670%" height="15" fill="rgb(220,10,11)"/><text x="50.6589%" y="255.50"></text></g><g><title>[libc-2.33.so] (1 samples, 0.01%)</title><rect x="50.9720%" y="149" width="0.0134%" height="15" fill="rgb(221,106,17)"/><text x="51.2220%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.09%)</title><rect x="50.9854%" y="149" width="0.0938%" height="15" fill="rgb(251,142,44)"/><text x="51.2354%" y="159.50"></text></g><g><title>_int_free (12 samples, 0.16%)</title><rect x="51.0792%" y="149" width="0.1609%" height="15" fill="rgb(238,13,15)"/><text x="51.3292%" y="159.50"></text></g><g><title>malloc_consolidate (2 samples, 0.03%)</title><rect x="51.7764%" y="133" width="0.0268%" height="15" fill="rgb(208,107,27)"/><text x="52.0264%" y="143.50"></text></g><g><title>__GI___libc_realloc (101 samples, 1.35%)</title><rect x="50.4893%" y="181" width="1.3541%" height="15" fill="rgb(205,136,37)"/><text x="50.7393%" y="191.50"></text></g><g><title>_int_realloc (88 samples, 1.18%)</title><rect x="50.6636%" y="165" width="1.1798%" height="15" fill="rgb(250,205,27)"/><text x="50.9136%" y="175.50"></text></g><g><title>_int_malloc (45 samples, 0.60%)</title><rect x="51.2401%" y="149" width="0.6033%" height="15" fill="rgb(210,80,43)"/><text x="51.4901%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.04%)</title><rect x="51.8032%" y="133" width="0.0402%" height="15" fill="rgb(247,160,36)"/><text x="52.0532%" y="143.50"></text></g><g><title>__rdl_realloc (9 samples, 0.12%)</title><rect x="51.8434%" y="181" width="0.1207%" height="15" fill="rgb(234,13,49)"/><text x="52.0934%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.08%)</title><rect x="51.8836%" y="165" width="0.0804%" height="15" fill="rgb(234,122,0)"/><text x="52.1336%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (112 samples, 1.50%)</title><rect x="50.4759%" y="245" width="1.5015%" height="15" fill="rgb(207,146,38)"/><text x="50.7259%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (112 samples, 1.50%)</title><rect x="50.4759%" y="229" width="1.5015%" height="15" fill="rgb(207,177,25)"/><text x="50.7259%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (112 samples, 1.50%)</title><rect x="50.4759%" y="213" width="1.5015%" height="15" fill="rgb(211,178,42)"/><text x="50.7259%" y="223.50"></text></g><g><title>alloc::alloc::realloc (112 samples, 1.50%)</title><rect x="50.4759%" y="197" width="1.5015%" height="15" fill="rgb(230,69,54)"/><text x="50.7259%" y="207.50"></text></g><g><title>__rust_realloc (1 samples, 0.01%)</title><rect x="51.9641%" y="181" width="0.0134%" height="15" fill="rgb(214,135,41)"/><text x="52.2141%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.03%)</title><rect x="51.9775%" y="245" width="0.0268%" height="15" fill="rgb(237,67,25)"/><text x="52.2275%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2 samples, 0.03%)</title><rect x="51.9775%" y="229" width="0.0268%" height="15" fill="rgb(222,189,50)"/><text x="52.2275%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.03%)</title><rect x="51.9775%" y="213" width="0.0268%" height="15" fill="rgb(245,148,34)"/><text x="52.2275%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2 samples, 0.03%)</title><rect x="51.9775%" y="197" width="0.0268%" height="15" fill="rgb(222,29,6)"/><text x="52.2275%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (135 samples, 1.81%)</title><rect x="50.2614%" y="261" width="1.8099%" height="15" fill="rgb(221,189,43)"/><text x="50.5114%" y="271.50">a..</text></g><g><title>core::cmp::max (5 samples, 0.07%)</title><rect x="52.0043%" y="245" width="0.0670%" height="15" fill="rgb(207,36,27)"/><text x="52.2543%" y="255.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.07%)</title><rect x="52.0043%" y="229" width="0.0670%" height="15" fill="rgb(217,90,24)"/><text x="52.2543%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.07%)</title><rect x="52.0043%" y="213" width="0.0670%" height="15" fill="rgb(224,66,35)"/><text x="52.2543%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.03%)</title><rect x="52.0713%" y="261" width="0.0268%" height="15" fill="rgb(221,13,50)"/><text x="52.3213%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.03%)</title><rect x="52.0713%" y="245" width="0.0268%" height="15" fill="rgb(236,68,49)"/><text x="52.3213%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (144 samples, 1.93%)</title><rect x="50.1810%" y="309" width="1.9306%" height="15" fill="rgb(229,146,28)"/><text x="50.4310%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (138 samples, 1.85%)</title><rect x="50.2614%" y="293" width="1.8501%" height="15" fill="rgb(225,31,38)"/><text x="50.5114%" y="303.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (138 samples, 1.85%)</title><rect x="50.2614%" y="277" width="1.8501%" height="15" fill="rgb(250,208,3)"/><text x="50.5114%" y="287.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="52.0981%" y="261" width="0.0134%" height="15" fill="rgb(246,54,23)"/><text x="52.3481%" y="271.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_points_in_cluster (624 samples, 8.37%)</title><rect x="44.2150%" y="341" width="8.3657%" height="15" fill="rgb(243,76,11)"/><text x="44.4650%" y="351.50">PracticasMet..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (215 samples, 2.88%)</title><rect x="49.6984%" y="325" width="2.8824%" height="15" fill="rgb(245,21,50)"/><text x="49.9484%" y="335.50">al..</text></g><g><title>core::ptr::write (35 samples, 0.47%)</title><rect x="52.1115%" y="309" width="0.4692%" height="15" fill="rgb(228,9,43)"/><text x="52.3615%" y="319.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (33 samples, 0.44%)</title><rect x="52.5808%" y="341" width="0.4424%" height="15" fill="rgb(208,100,47)"/><text x="52.8308%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.23%)</title><rect x="53.0232%" y="309" width="0.2279%" height="15" fill="rgb(232,26,8)"/><text x="53.2732%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (17 samples, 0.23%)</title><rect x="53.0232%" y="293" width="0.2279%" height="15" fill="rgb(216,166,38)"/><text x="53.2732%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.21%)</title><rect x="53.0366%" y="277" width="0.2145%" height="15" fill="rgb(251,202,51)"/><text x="53.2866%" y="287.50"></text></g><g><title>__GI___libc_free (16 samples, 0.21%)</title><rect x="53.0366%" y="261" width="0.2145%" height="15" fill="rgb(254,216,34)"/><text x="53.2866%" y="271.50"></text></g><g><title>_int_free (12 samples, 0.16%)</title><rect x="53.0902%" y="245" width="0.1609%" height="15" fill="rgb(251,32,27)"/><text x="53.3402%" y="255.50"></text></g><g><title>__GI___libc_free (21 samples, 0.28%)</title><rect x="53.2645%" y="197" width="0.2815%" height="15" fill="rgb(208,127,28)"/><text x="53.5145%" y="207.50"></text></g><g><title>_int_free (15 samples, 0.20%)</title><rect x="53.3450%" y="181" width="0.2011%" height="15" fill="rgb(224,137,22)"/><text x="53.5950%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.31%)</title><rect x="53.2511%" y="277" width="0.3084%" height="15" fill="rgb(254,70,32)"/><text x="53.5011%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.31%)</title><rect x="53.2511%" y="261" width="0.3084%" height="15" fill="rgb(229,75,37)"/><text x="53.5011%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.31%)</title><rect x="53.2511%" y="245" width="0.3084%" height="15" fill="rgb(252,64,23)"/><text x="53.5011%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (23 samples, 0.31%)</title><rect x="53.2511%" y="229" width="0.3084%" height="15" fill="rgb(232,162,48)"/><text x="53.5011%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.31%)</title><rect x="53.2511%" y="213" width="0.3084%" height="15" fill="rgb(246,160,12)"/><text x="53.5011%" y="223.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="53.5461%" y="197" width="0.0134%" height="15" fill="rgb(247,166,0)"/><text x="53.7961%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="53.5461%" y="181" width="0.0134%" height="15" fill="rgb(249,219,21)"/><text x="53.7961%" y="191.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (3,309 samples, 44.36%)</title><rect x="9.2238%" y="373" width="44.3625%" height="15" fill="rgb(205,209,3)"/><text x="9.4738%" y="383.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_c..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_cluster_distance (3,300 samples, 44.24%)</title><rect x="9.3444%" y="357" width="44.2419%" height="15" fill="rgb(243,44,1)"/><text x="9.5944%" y="367.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_c..</text></g><g><title>core::ptr::drop_in_place (42 samples, 0.56%)</title><rect x="53.0232%" y="341" width="0.5631%" height="15" fill="rgb(206,159,16)"/><text x="53.2732%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.56%)</title><rect x="53.0232%" y="325" width="0.5631%" height="15" fill="rgb(244,77,30)"/><text x="53.2732%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.34%)</title><rect x="53.2511%" y="309" width="0.3352%" height="15" fill="rgb(218,69,12)"/><text x="53.5011%" y="319.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.34%)</title><rect x="53.2511%" y="293" width="0.3352%" height="15" fill="rgb(212,87,7)"/><text x="53.5011%" y="303.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::take_as_vec (2 samples, 0.03%)</title><rect x="53.5595%" y="277" width="0.0268%" height="15" fill="rgb(245,114,25)"/><text x="53.8095%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (320 samples, 4.29%)</title><rect x="76.9406%" y="357" width="4.2901%" height="15" fill="rgb(210,61,42)"/><text x="77.1906%" y="367.50">&lt;allo..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (320 samples, 4.29%)</title><rect x="76.9406%" y="341" width="4.2901%" height="15" fill="rgb(211,52,33)"/><text x="77.1906%" y="351.50">core:..</text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (320 samples, 4.29%)</title><rect x="76.9406%" y="325" width="4.2901%" height="15" fill="rgb(234,58,33)"/><text x="77.1906%" y="335.50">&lt;usiz..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (155 samples, 2.08%)</title><rect x="82.9468%" y="293" width="2.0780%" height="15" fill="rgb(220,115,36)"/><text x="83.1968%" y="303.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (155 samples, 2.08%)</title><rect x="82.9468%" y="277" width="2.0780%" height="15" fill="rgb(243,153,54)"/><text x="83.1968%" y="287.50">c..</text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (155 samples, 2.08%)</title><rect x="82.9468%" y="261" width="2.0780%" height="15" fill="rgb(251,47,18)"/><text x="83.1968%" y="271.50">c..</text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (155 samples, 2.08%)</title><rect x="82.9468%" y="245" width="2.0780%" height="15" fill="rgb(242,102,42)"/><text x="83.1968%" y="255.50">c..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (309 samples, 4.14%)</title><rect x="85.0248%" y="293" width="4.1426%" height="15" fill="rgb(234,31,38)"/><text x="85.2748%" y="303.50">hashb..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (40 samples, 0.54%)</title><rect x="89.1674%" y="293" width="0.5363%" height="15" fill="rgb(221,117,51)"/><text x="89.4174%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (3 samples, 0.04%)</title><rect x="89.7037%" y="293" width="0.0402%" height="15" fill="rgb(212,20,18)"/><text x="89.9537%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (3 samples, 0.04%)</title><rect x="89.7037%" y="277" width="0.0402%" height="15" fill="rgb(245,133,36)"/><text x="89.9537%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (526 samples, 7.05%)</title><rect x="82.9334%" y="325" width="7.0519%" height="15" fill="rgb(212,6,19)"/><text x="83.1834%" y="335.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (525 samples, 7.04%)</title><rect x="82.9468%" y="309" width="7.0385%" height="15" fill="rgb(218,1,36)"/><text x="83.1968%" y="319.50">&lt;hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (18 samples, 0.24%)</title><rect x="89.7439%" y="293" width="0.2413%" height="15" fill="rgb(246,84,54)"/><text x="89.9939%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (18 samples, 0.24%)</title><rect x="89.7439%" y="277" width="0.2413%" height="15" fill="rgb(242,110,6)"/><text x="89.9939%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.24%)</title><rect x="89.7439%" y="261" width="0.2413%" height="15" fill="rgb(214,47,5)"/><text x="89.9939%" y="271.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility (252 samples, 3.38%)</title><rect x="89.9853%" y="325" width="3.3785%" height="15" fill="rgb(218,159,25)"/><text x="90.2353%" y="335.50">Pra..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::fitness (6,684 samples, 89.61%)</title><rect x="9.1969%" y="389" width="89.6099%" height="15" fill="rgb(215,211,28)"/><text x="9.4469%" y="399.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::fitness</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility (3,373 samples, 45.22%)</title><rect x="53.5863%" y="373" width="45.2205%" height="15" fill="rgb(238,59,32)"/><text x="53.8363%" y="383.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibi..</text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,311 samples, 17.58%)</title><rect x="81.2307%" y="357" width="17.5761%" height="15" fill="rgb(226,82,3)"/><text x="81.4807%" y="367.50">&lt;std::collections::hash::ma..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,311 samples, 17.58%)</title><rect x="81.2307%" y="341" width="17.5761%" height="15" fill="rgb(240,164,32)"/><text x="81.4807%" y="351.50">&lt;hashbrown::map::Iter&lt;K,V&gt; ..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (406 samples, 5.44%)</title><rect x="93.3637%" y="325" width="5.4431%" height="15" fill="rgb(232,46,7)"/><text x="93.6137%" y="335.50">hashbro..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (406 samples, 5.44%)</title><rect x="93.3637%" y="309" width="5.4431%" height="15" fill="rgb(229,129,53)"/><text x="93.6137%" y="319.50">hashbro..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (406 samples, 5.44%)</title><rect x="93.3637%" y="293" width="5.4431%" height="15" fill="rgb(234,188,29)"/><text x="93.6137%" y="303.50">core::p..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (406 samples, 5.44%)</title><rect x="93.3637%" y="277" width="5.4431%" height="15" fill="rgb(246,141,4)"/><text x="93.6137%" y="287.50">core::p..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.05%)</title><rect x="98.8202%" y="325" width="0.0536%" height="15" fill="rgb(229,23,39)"/><text x="99.0702%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.05%)</title><rect x="98.8202%" y="309" width="0.0536%" height="15" fill="rgb(206,12,3)"/><text x="99.0702%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.05%)</title><rect x="98.8202%" y="293" width="0.0536%" height="15" fill="rgb(252,226,20)"/><text x="99.0702%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="98.8202%" y="277" width="0.0536%" height="15" fill="rgb(216,123,35)"/><text x="99.0702%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="98.8202%" y="261" width="0.0536%" height="15" fill="rgb(212,68,40)"/><text x="99.0702%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (15 samples, 0.20%)</title><rect x="98.8738%" y="261" width="0.2011%" height="15" fill="rgb(254,125,32)"/><text x="99.1238%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.20%)</title><rect x="98.8738%" y="245" width="0.2011%" height="15" fill="rgb(253,97,22)"/><text x="99.1238%" y="255.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.20%)</title><rect x="98.8738%" y="229" width="0.2011%" height="15" fill="rgb(241,101,14)"/><text x="99.1238%" y="239.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.20%)</title><rect x="98.8738%" y="213" width="0.2011%" height="15" fill="rgb(238,103,29)"/><text x="99.1238%" y="223.50"></text></g><g><title>_int_malloc (14 samples, 0.19%)</title><rect x="98.8873%" y="197" width="0.1877%" height="15" fill="rgb(233,195,47)"/><text x="99.1373%" y="207.50"></text></g><g><title>malloc_consolidate (9 samples, 0.12%)</title><rect x="98.9543%" y="181" width="0.1207%" height="15" fill="rgb(246,218,30)"/><text x="99.2043%" y="191.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::generate_solution_from (21 samples, 0.28%)</title><rect x="98.8068%" y="389" width="0.2815%" height="15" fill="rgb(219,145,47)"/><text x="99.0568%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.27%)</title><rect x="98.8202%" y="373" width="0.2681%" height="15" fill="rgb(243,12,26)"/><text x="99.0702%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.27%)</title><rect x="98.8202%" y="357" width="0.2681%" height="15" fill="rgb(214,87,16)"/><text x="99.0702%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.27%)</title><rect x="98.8202%" y="341" width="0.2681%" height="15" fill="rgb(208,99,42)"/><text x="99.0702%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.21%)</title><rect x="98.8738%" y="325" width="0.2145%" height="15" fill="rgb(253,99,2)"/><text x="99.1238%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.21%)</title><rect x="98.8738%" y="309" width="0.2145%" height="15" fill="rgb(220,168,23)"/><text x="99.1238%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.21%)</title><rect x="98.8738%" y="293" width="0.2145%" height="15" fill="rgb(242,38,24)"/><text x="99.1238%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.21%)</title><rect x="98.8738%" y="277" width="0.2145%" height="15" fill="rgb(225,182,9)"/><text x="99.1238%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (1 samples, 0.01%)</title><rect x="99.0749%" y="261" width="0.0134%" height="15" fill="rgb(243,178,37)"/><text x="99.3249%" y="271.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.05%)</title><rect x="99.4235%" y="357" width="0.0536%" height="15" fill="rgb(232,139,19)"/><text x="99.6735%" y="367.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (54 samples, 0.72%)</title><rect x="99.0883%" y="373" width="0.7240%" height="15" fill="rgb(225,201,24)"/><text x="99.3383%" y="383.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::is_valid::{{closure}} (25 samples, 0.34%)</title><rect x="99.4771%" y="357" width="0.3352%" height="15" fill="rgb(221,47,46)"/><text x="99.7271%" y="367.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.05%)</title><rect x="99.8659%" y="357" width="0.0536%" height="15" fill="rgb(249,23,13)"/><text x="100.1159%" y="367.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (4 samples, 0.05%)</title><rect x="99.8659%" y="341" width="0.0536%" height="15" fill="rgb(219,9,5)"/><text x="100.1159%" y="351.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::is_valid (63 samples, 0.84%)</title><rect x="99.0883%" y="389" width="0.8446%" height="15" fill="rgb(254,171,16)"/><text x="99.3383%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.12%)</title><rect x="99.8123%" y="373" width="0.1207%" height="15" fill="rgb(230,171,20)"/><text x="100.0623%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.01%)</title><rect x="99.9196%" y="357" width="0.0134%" height="15" fill="rgb(210,71,41)"/><text x="100.1696%" y="367.50"></text></g><g><title>__libc_start_main (6,877 samples, 92.20%)</title><rect x="7.7892%" y="597" width="92.1973%" height="15" fill="rgb(206,173,20)"/><text x="8.0392%" y="607.50">__libc_start_main</text></g><g><title>main (6,877 samples, 92.20%)</title><rect x="7.7892%" y="581" width="92.1973%" height="15" fill="rgb(233,88,34)"/><text x="8.0392%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (6,877 samples, 92.20%)</title><rect x="7.7892%" y="565" width="92.1973%" height="15" fill="rgb(223,209,46)"/><text x="8.0392%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (6,877 samples, 92.20%)</title><rect x="7.7892%" y="549" width="92.1973%" height="15" fill="rgb(250,43,18)"/><text x="8.0392%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,877 samples, 92.20%)</title><rect x="7.7892%" y="533" width="92.1973%" height="15" fill="rgb(208,13,10)"/><text x="8.0392%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,877 samples, 92.20%)</title><rect x="7.7892%" y="517" width="92.1973%" height="15" fill="rgb(212,200,36)"/><text x="8.0392%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6,877 samples, 92.20%)</title><rect x="7.7892%" y="501" width="92.1973%" height="15" fill="rgb(225,90,30)"/><text x="8.0392%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (6,877 samples, 92.20%)</title><rect x="7.7892%" y="485" width="92.1973%" height="15" fill="rgb(236,182,39)"/><text x="8.0392%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,877 samples, 92.20%)</title><rect x="7.7892%" y="469" width="92.1973%" height="15" fill="rgb(212,144,35)"/><text x="8.0392%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (6,877 samples, 92.20%)</title><rect x="7.7892%" y="453" width="92.1973%" height="15" fill="rgb(228,63,44)"/><text x="8.0392%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>PracticasMetaheuristicas::main (6,877 samples, 92.20%)</title><rect x="7.7892%" y="437" width="92.1973%" height="15" fill="rgb(228,109,6)"/><text x="8.0392%" y="447.50">PracticasMetaheuristicas::main</text></g><g><title>PracticasMetaheuristicas::local_search::run (6,868 samples, 92.08%)</title><rect x="7.9099%" y="421" width="92.0767%" height="15" fill="rgb(238,117,24)"/><text x="8.1599%" y="431.50">PracticasMetaheuristicas::local_search::run</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_neighbour (6,865 samples, 92.04%)</title><rect x="7.9501%" y="405" width="92.0365%" height="15" fill="rgb(242,26,26)"/><text x="8.2001%" y="415.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_neighbour</text></g><g><title>core::ptr::drop_in_place (4 samples, 0.05%)</title><rect x="99.9330%" y="389" width="0.0536%" height="15" fill="rgb(221,92,48)"/><text x="100.1830%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.05%)</title><rect x="99.9330%" y="373" width="0.0536%" height="15" fill="rgb(209,209,32)"/><text x="100.1830%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.05%)</title><rect x="99.9330%" y="357" width="0.0536%" height="15" fill="rgb(221,70,22)"/><text x="100.1830%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="99.9330%" y="341" width="0.0536%" height="15" fill="rgb(248,145,5)"/><text x="100.1830%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (4 samples, 0.05%)</title><rect x="99.9330%" y="325" width="0.0536%" height="15" fill="rgb(226,116,26)"/><text x="100.1830%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.05%)</title><rect x="99.9330%" y="309" width="0.0536%" height="15" fill="rgb(244,5,17)"/><text x="100.1830%" y="319.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="99.9330%" y="293" width="0.0536%" height="15" fill="rgb(252,159,33)"/><text x="100.1830%" y="303.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="99.9464%" y="277" width="0.0402%" height="15" fill="rgb(206,71,0)"/><text x="100.1964%" y="287.50"></text></g><g><title>all (7,459 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(233,118,54)"/><text x="0.2500%" y="655.50"></text></g><g><title>PracticasMetahe (7,459 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(234,83,48)"/><text x="0.2500%" y="639.50">PracticasMetahe</text></g><g><title>_start (6,883 samples, 92.28%)</title><rect x="7.7222%" y="613" width="92.2778%" height="15" fill="rgb(228,3,54)"/><text x="7.9722%" y="623.50">_start</text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.9866%" y="597" width="0.0134%" height="15" fill="rgb(226,155,13)"/><text x="100.2366%" y="607.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.9866%" y="581" width="0.0134%" height="15" fill="rgb(241,28,37)"/><text x="100.2366%" y="591.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.01%)</title><rect x="99.9866%" y="565" width="0.0134%" height="15" fill="rgb(233,93,10)"/><text x="100.2366%" y="575.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.01%)</title><rect x="99.9866%" y="549" width="0.0134%" height="15" fill="rgb(225,113,19)"/><text x="100.2366%" y="559.50"></text></g><g><title>intel_check_word.constprop.0 (1 samples, 0.01%)</title><rect x="99.9866%" y="533" width="0.0134%" height="15" fill="rgb(241,2,18)"/><text x="100.2366%" y="543.50"></text></g></svg></svg>