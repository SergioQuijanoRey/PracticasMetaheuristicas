<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180"><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (2 samples, 0.01%)</title><rect x="0.0000%" y="581" width="0.0139%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="591.50"></text></g><g><title>__GI___libc_free (26 samples, 0.18%)</title><rect x="0.0208%" y="581" width="0.1806%" height="15" fill="rgb(217,0,24)"/><text x="0.2708%" y="591.50"></text></g><g><title>__GI___libc_malloc (67 samples, 0.47%)</title><rect x="0.2014%" y="581" width="0.4653%" height="15" fill="rgb(221,193,54)"/><text x="0.4514%" y="591.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.01%)</title><rect x="0.6667%" y="581" width="0.0139%" height="15" fill="rgb(248,212,6)"/><text x="0.9167%" y="591.50"></text></g><g><title>__calloc (6 samples, 0.04%)</title><rect x="0.6806%" y="581" width="0.0417%" height="15" fill="rgb(208,68,35)"/><text x="0.9306%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.08%)</title><rect x="0.7223%" y="581" width="0.0764%" height="15" fill="rgb(232,128,0)"/><text x="0.9723%" y="591.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="0.7987%" y="581" width="0.0347%" height="15" fill="rgb(207,160,47)"/><text x="1.0487%" y="591.50"></text></g><g><title>_int_malloc (3 samples, 0.02%)</title><rect x="0.8334%" y="581" width="0.0208%" height="15" fill="rgb(228,23,34)"/><text x="1.0834%" y="591.50"></text></g><g><title>_int_realloc (4 samples, 0.03%)</title><rect x="0.8542%" y="581" width="0.0278%" height="15" fill="rgb(218,30,26)"/><text x="1.1042%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.19%)</title><rect x="0.8820%" y="581" width="0.1875%" height="15" fill="rgb(220,122,19)"/><text x="1.1320%" y="591.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (2 samples, 0.01%)</title><rect x="1.0695%" y="581" width="0.0139%" height="15" fill="rgb(250,228,42)"/><text x="1.3195%" y="591.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (2 samples, 0.01%)</title><rect x="1.0695%" y="565" width="0.0139%" height="15" fill="rgb(240,193,28)"/><text x="1.3195%" y="575.50"></text></g><g><title>&lt;T as ndarray::shape_builder::ShapeBuilder&gt;::into_shape (2 samples, 0.01%)</title><rect x="1.0695%" y="549" width="0.0139%" height="15" fill="rgb(216,20,37)"/><text x="1.3195%" y="559.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (6 samples, 0.04%)</title><rect x="1.0834%" y="581" width="0.0417%" height="15" fill="rgb(206,188,39)"/><text x="1.3334%" y="591.50"></text></g><g><title>[[heap]] (167 samples, 1.16%)</title><rect x="0.0000%" y="597" width="1.1598%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="607.50"></text></g><g><title>rand::rng::Rng::gen_range (5 samples, 0.03%)</title><rect x="1.1251%" y="581" width="0.0347%" height="15" fill="rgb(231,73,38)"/><text x="1.3751%" y="591.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::calculate_centroid (10 samples, 0.07%)</title><rect x="1.2223%" y="549" width="0.0694%" height="15" fill="rgb(225,20,46)"/><text x="1.4723%" y="559.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_points_in_cluster (4 samples, 0.03%)</title><rect x="1.2918%" y="549" width="0.0278%" height="15" fill="rgb(210,31,41)"/><text x="1.5418%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.03%)</title><rect x="1.2918%" y="533" width="0.0278%" height="15" fill="rgb(221,200,47)"/><text x="1.5418%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.03%)</title><rect x="1.2918%" y="517" width="0.0278%" height="15" fill="rgb(226,26,5)"/><text x="1.5418%" y="527.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (25 samples, 0.17%)</title><rect x="1.1598%" y="581" width="0.1736%" height="15" fill="rgb(249,33,26)"/><text x="1.4098%" y="591.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_cluster_distance (24 samples, 0.17%)</title><rect x="1.1667%" y="565" width="0.1667%" height="15" fill="rgb(235,183,28)"/><text x="1.4167%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.01%)</title><rect x="1.3195%" y="549" width="0.0139%" height="15" fill="rgb(221,5,38)"/><text x="1.5695%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.01%)</title><rect x="1.3195%" y="533" width="0.0139%" height="15" fill="rgb(247,18,42)"/><text x="1.5695%" y="543.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.06%)</title><rect x="1.3334%" y="581" width="0.0556%" height="15" fill="rgb(241,131,45)"/><text x="1.5834%" y="591.50"></text></g><g><title>_int_free (168 samples, 1.17%)</title><rect x="1.3959%" y="581" width="1.1667%" height="15" fill="rgb(249,31,29)"/><text x="1.6459%" y="591.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="2.5627%" y="581" width="0.0139%" height="15" fill="rgb(225,111,53)"/><text x="2.8127%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.13%)</title><rect x="2.5766%" y="581" width="0.1250%" height="15" fill="rgb(238,160,17)"/><text x="2.8266%" y="591.50"></text></g><g><title>[[stack]] (224 samples, 1.56%)</title><rect x="1.1598%" y="597" width="1.5557%" height="15" fill="rgb(214,148,48)"/><text x="1.4098%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.01%)</title><rect x="2.7016%" y="581" width="0.0139%" height="15" fill="rgb(232,36,49)"/><text x="2.9516%" y="591.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (101 samples, 0.70%)</title><rect x="2.7155%" y="581" width="0.7014%" height="15" fill="rgb(209,103,24)"/><text x="2.9655%" y="591.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (79 samples, 0.55%)</title><rect x="2.8683%" y="565" width="0.5486%" height="15" fill="rgb(229,88,8)"/><text x="3.1183%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.21%)</title><rect x="3.2086%" y="549" width="0.2083%" height="15" fill="rgb(213,181,19)"/><text x="3.4586%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.21%)</title><rect x="3.2086%" y="533" width="0.2083%" height="15" fill="rgb(254,191,54)"/><text x="3.4586%" y="543.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.21%)</title><rect x="3.2086%" y="517" width="0.2083%" height="15" fill="rgb(241,83,37)"/><text x="3.4586%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.21%)</title><rect x="3.2086%" y="501" width="0.2083%" height="15" fill="rgb(233,36,39)"/><text x="3.4586%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.21%)</title><rect x="3.2086%" y="485" width="0.2083%" height="15" fill="rgb(226,3,54)"/><text x="3.4586%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.21%)</title><rect x="3.2086%" y="469" width="0.2083%" height="15" fill="rgb(245,192,40)"/><text x="3.4586%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (30 samples, 0.21%)</title><rect x="3.2086%" y="453" width="0.2083%" height="15" fill="rgb(238,167,29)"/><text x="3.4586%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.21%)</title><rect x="3.2086%" y="437" width="0.2083%" height="15" fill="rgb(232,182,51)"/><text x="3.4586%" y="447.50"></text></g><g><title>__GI___libc_free (107 samples, 0.74%)</title><rect x="3.4238%" y="581" width="0.7431%" height="15" fill="rgb(231,60,39)"/><text x="3.6738%" y="591.50"></text></g><g><title>__GI___libc_malloc (55 samples, 0.38%)</title><rect x="4.1670%" y="581" width="0.3820%" height="15" fill="rgb(208,69,12)"/><text x="4.4170%" y="591.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.05%)</title><rect x="4.5489%" y="581" width="0.0486%" height="15" fill="rgb(235,93,37)"/><text x="4.7989%" y="591.50"></text></g><g><title>__calloc (5 samples, 0.03%)</title><rect x="4.5975%" y="581" width="0.0347%" height="15" fill="rgb(213,116,39)"/><text x="4.8475%" y="591.50"></text></g><g><title>__rdl_alloc (5 samples, 0.03%)</title><rect x="4.6323%" y="581" width="0.0347%" height="15" fill="rgb(222,207,29)"/><text x="4.8823%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.03%)</title><rect x="4.6392%" y="565" width="0.0278%" height="15" fill="rgb(206,96,30)"/><text x="4.8892%" y="575.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="4.6739%" y="581" width="0.0347%" height="15" fill="rgb(218,138,4)"/><text x="4.9239%" y="591.50"></text></g><g><title>_int_malloc (10 samples, 0.07%)</title><rect x="4.7087%" y="581" width="0.0694%" height="15" fill="rgb(250,191,14)"/><text x="4.9587%" y="591.50"></text></g><g><title>_int_realloc (5 samples, 0.03%)</title><rect x="4.7781%" y="581" width="0.0347%" height="15" fill="rgb(239,60,40)"/><text x="5.0281%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.01%)</title><rect x="4.9031%" y="533" width="0.0139%" height="15" fill="rgb(206,27,48)"/><text x="5.1531%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.12%)</title><rect x="4.8128%" y="581" width="0.1181%" height="15" fill="rgb(225,35,8)"/><text x="5.0628%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.03%)</title><rect x="4.9031%" y="565" width="0.0278%" height="15" fill="rgb(250,213,24)"/><text x="5.1531%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="4.9031%" y="549" width="0.0278%" height="15" fill="rgb(247,123,22)"/><text x="5.1531%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="4.9170%" y="533" width="0.0139%" height="15" fill="rgb(231,138,38)"/><text x="5.1670%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.01%)</title><rect x="4.9170%" y="517" width="0.0139%" height="15" fill="rgb(231,145,46)"/><text x="5.1670%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="4.9170%" y="501" width="0.0139%" height="15" fill="rgb(251,118,11)"/><text x="5.1670%" y="511.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="4.9170%" y="485" width="0.0139%" height="15" fill="rgb(217,147,25)"/><text x="5.1670%" y="495.50"></text></g><g><title>malloc_consolidate (2 samples, 0.01%)</title><rect x="4.9309%" y="581" width="0.0139%" height="15" fill="rgb(247,81,37)"/><text x="5.1809%" y="591.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (4 samples, 0.03%)</title><rect x="4.9448%" y="581" width="0.0278%" height="15" fill="rgb(209,12,38)"/><text x="5.1948%" y="591.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (2 samples, 0.01%)</title><rect x="4.9587%" y="565" width="0.0139%" height="15" fill="rgb(227,1,9)"/><text x="5.2087%" y="575.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (106 samples, 0.74%)</title><rect x="4.9726%" y="581" width="0.7362%" height="15" fill="rgb(248,47,43)"/><text x="5.2226%" y="591.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (24 samples, 0.17%)</title><rect x="5.5421%" y="565" width="0.1667%" height="15" fill="rgb(221,10,30)"/><text x="5.7921%" y="575.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (24 samples, 0.17%)</title><rect x="5.5421%" y="549" width="0.1667%" height="15" fill="rgb(210,229,1)"/><text x="5.7921%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (24 samples, 0.17%)</title><rect x="5.5421%" y="533" width="0.1667%" height="15" fill="rgb(222,148,37)"/><text x="5.7921%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (24 samples, 0.17%)</title><rect x="5.5421%" y="517" width="0.1667%" height="15" fill="rgb(234,67,33)"/><text x="5.7921%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.17%)</title><rect x="5.5421%" y="501" width="0.1667%" height="15" fill="rgb(247,98,35)"/><text x="5.7921%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.17%)</title><rect x="5.5421%" y="485" width="0.1667%" height="15" fill="rgb(247,138,52)"/><text x="5.7921%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (24 samples, 0.17%)</title><rect x="5.5421%" y="469" width="0.1667%" height="15" fill="rgb(213,79,30)"/><text x="5.7921%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.17%)</title><rect x="5.5421%" y="453" width="0.1667%" height="15" fill="rgb(246,177,23)"/><text x="5.7921%" y="463.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.17%)</title><rect x="5.5421%" y="437" width="0.1667%" height="15" fill="rgb(230,62,27)"/><text x="5.7921%" y="447.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (94 samples, 0.65%)</title><rect x="5.7087%" y="581" width="0.6528%" height="15" fill="rgb(216,154,8)"/><text x="5.9587%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.03%)</title><rect x="6.8755%" y="485" width="0.0347%" height="15" fill="rgb(244,35,45)"/><text x="7.1255%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.06%)</title><rect x="6.8755%" y="517" width="0.0625%" height="15" fill="rgb(251,115,12)"/><text x="7.1255%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.06%)</title><rect x="6.8755%" y="501" width="0.0625%" height="15" fill="rgb(240,54,50)"/><text x="7.1255%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.03%)</title><rect x="6.9102%" y="485" width="0.0278%" height="15" fill="rgb(233,84,52)"/><text x="7.1602%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="6.9102%" y="469" width="0.0278%" height="15" fill="rgb(207,117,47)"/><text x="7.1602%" y="479.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (94 samples, 0.65%)</title><rect x="6.3685%" y="581" width="0.6528%" height="15" fill="rgb(249,43,39)"/><text x="6.6185%" y="591.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (21 samples, 0.15%)</title><rect x="6.8755%" y="565" width="0.1458%" height="15" fill="rgb(209,38,44)"/><text x="7.1255%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.15%)</title><rect x="6.8755%" y="549" width="0.1458%" height="15" fill="rgb(236,212,23)"/><text x="7.1255%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.15%)</title><rect x="6.8755%" y="533" width="0.1458%" height="15" fill="rgb(242,79,21)"/><text x="7.1255%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.08%)</title><rect x="6.9380%" y="517" width="0.0833%" height="15" fill="rgb(211,96,35)"/><text x="7.1880%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (12 samples, 0.08%)</title><rect x="6.9380%" y="501" width="0.0833%" height="15" fill="rgb(253,215,40)"/><text x="7.1880%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.08%)</title><rect x="6.9380%" y="485" width="0.0833%" height="15" fill="rgb(211,81,21)"/><text x="7.1880%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.08%)</title><rect x="6.9380%" y="469" width="0.0833%" height="15" fill="rgb(208,190,38)"/><text x="7.1880%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (12 samples, 0.08%)</title><rect x="6.9380%" y="453" width="0.0833%" height="15" fill="rgb(235,213,38)"/><text x="7.1880%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.08%)</title><rect x="6.9380%" y="437" width="0.0833%" height="15" fill="rgb(237,122,38)"/><text x="7.1880%" y="447.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.08%)</title><rect x="6.9380%" y="421" width="0.0833%" height="15" fill="rgb(244,218,35)"/><text x="7.1880%" y="431.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (23 samples, 0.16%)</title><rect x="7.0213%" y="581" width="0.1597%" height="15" fill="rgb(240,68,47)"/><text x="7.2713%" y="591.50"></text></g><g><title>rand::rng::Rng::gen_range (6 samples, 0.04%)</title><rect x="7.1811%" y="581" width="0.0417%" height="15" fill="rgb(210,16,53)"/><text x="7.4311%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::is_empty (6 samples, 0.04%)</title><rect x="7.1811%" y="565" width="0.0417%" height="15" fill="rgb(235,124,12)"/><text x="7.4311%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (6 samples, 0.04%)</title><rect x="7.1811%" y="549" width="0.0417%" height="15" fill="rgb(224,169,11)"/><text x="7.4311%" y="559.50"></text></g><g><title>[unknown] (651 samples, 4.52%)</title><rect x="2.7155%" y="597" width="4.5211%" height="15" fill="rgb(250,166,2)"/><text x="2.9655%" y="607.50">[unkn..</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.01%)</title><rect x="7.2227%" y="581" width="0.0139%" height="15" fill="rgb(242,216,29)"/><text x="7.4727%" y="591.50"></text></g><g><title>__rdl_alloc (5 samples, 0.03%)</title><rect x="7.2436%" y="597" width="0.0347%" height="15" fill="rgb(230,116,27)"/><text x="7.4936%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="7.3130%" y="389" width="0.0208%" height="15" fill="rgb(228,99,48)"/><text x="7.5630%" y="399.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="7.3130%" y="373" width="0.0208%" height="15" fill="rgb(253,11,6)"/><text x="7.5630%" y="383.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (2 samples, 0.01%)</title><rect x="7.3200%" y="357" width="0.0139%" height="15" fill="rgb(247,143,39)"/><text x="7.5700%" y="367.50"></text></g><g><title>csv::string_record::StringRecord::read (2 samples, 0.01%)</title><rect x="7.3200%" y="341" width="0.0139%" height="15" fill="rgb(236,97,10)"/><text x="7.5700%" y="351.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (2 samples, 0.01%)</title><rect x="7.3200%" y="325" width="0.0139%" height="15" fill="rgb(233,208,19)"/><text x="7.5700%" y="335.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (2 samples, 0.01%)</title><rect x="7.3200%" y="309" width="0.0139%" height="15" fill="rgb(216,164,2)"/><text x="7.5700%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (2 samples, 0.01%)</title><rect x="7.3200%" y="293" width="0.0139%" height="15" fill="rgb(220,129,5)"/><text x="7.5700%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (2 samples, 0.01%)</title><rect x="7.3200%" y="277" width="0.0139%" height="15" fill="rgb(242,17,10)"/><text x="7.5700%" y="287.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_constraints_file_to_struct (7 samples, 0.05%)</title><rect x="7.3130%" y="405" width="0.0486%" height="15" fill="rgb(242,107,0)"/><text x="7.5630%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="7.3408%" y="389" width="0.0208%" height="15" fill="rgb(251,28,31)"/><text x="7.5908%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="7.3408%" y="373" width="0.0208%" height="15" fill="rgb(233,223,10)"/><text x="7.5908%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="7.3408%" y="357" width="0.0208%" height="15" fill="rgb(215,21,27)"/><text x="7.5908%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="7.3408%" y="341" width="0.0208%" height="15" fill="rgb(232,23,21)"/><text x="7.5908%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="7.3477%" y="325" width="0.0139%" height="15" fill="rgb(244,5,23)"/><text x="7.5977%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="7.3477%" y="309" width="0.0139%" height="15" fill="rgb(226,81,46)"/><text x="7.5977%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="7.3477%" y="293" width="0.0139%" height="15" fill="rgb(247,70,30)"/><text x="7.5977%" y="303.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.01%)</title><rect x="7.3477%" y="277" width="0.0139%" height="15" fill="rgb(212,68,19)"/><text x="7.5977%" y="287.50"></text></g><g><title>PracticasMetaheuristicas::file_parsers::parse_constraints_file_to_struct::{{closure}} (2 samples, 0.01%)</title><rect x="7.3477%" y="261" width="0.0139%" height="15" fill="rgb(240,187,13)"/><text x="7.5977%" y="271.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.01%)</title><rect x="7.3477%" y="245" width="0.0139%" height="15" fill="rgb(223,113,26)"/><text x="7.5977%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.01%)</title><rect x="7.3477%" y="229" width="0.0139%" height="15" fill="rgb(206,192,2)"/><text x="7.5977%" y="239.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.01%)</title><rect x="7.3477%" y="213" width="0.0139%" height="15" fill="rgb(241,108,4)"/><text x="7.5977%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.01%)</title><rect x="7.3477%" y="197" width="0.0139%" height="15" fill="rgb(247,173,49)"/><text x="7.5977%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.01%)</title><rect x="7.3477%" y="181" width="0.0139%" height="15" fill="rgb(224,114,35)"/><text x="7.5977%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.01%)</title><rect x="7.3477%" y="165" width="0.0139%" height="15" fill="rgb(245,159,27)"/><text x="7.5977%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="7.3477%" y="149" width="0.0139%" height="15" fill="rgb(245,172,44)"/><text x="7.5977%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="7.3477%" y="133" width="0.0139%" height="15" fill="rgb(236,23,11)"/><text x="7.5977%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="7.3477%" y="117" width="0.0139%" height="15" fill="rgb(205,117,38)"/><text x="7.5977%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="7.3477%" y="101" width="0.0139%" height="15" fill="rgb(237,72,25)"/><text x="7.5977%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.01%)</title><rect x="7.3477%" y="85" width="0.0139%" height="15" fill="rgb(244,70,9)"/><text x="7.5977%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="7.3477%" y="69" width="0.0139%" height="15" fill="rgb(217,125,39)"/><text x="7.5977%" y="79.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="7.3477%" y="53" width="0.0139%" height="15" fill="rgb(235,36,10)"/><text x="7.5977%" y="63.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.01%)</title><rect x="7.3686%" y="309" width="0.0139%" height="15" fill="rgb(251,123,47)"/><text x="7.6186%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.01%)</title><rect x="7.3686%" y="293" width="0.0139%" height="15" fill="rgb(221,13,13)"/><text x="7.6186%" y="303.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="7.3686%" y="277" width="0.0139%" height="15" fill="rgb(238,131,9)"/><text x="7.6186%" y="287.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::generate_random_solution (5 samples, 0.03%)</title><rect x="7.3686%" y="389" width="0.0347%" height="15" fill="rgb(211,50,8)"/><text x="7.6186%" y="399.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::new (5 samples, 0.03%)</title><rect x="7.3686%" y="373" width="0.0347%" height="15" fill="rgb(245,182,24)"/><text x="7.6186%" y="383.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::max_distance_among_two (5 samples, 0.03%)</title><rect x="7.3686%" y="357" width="0.0347%" height="15" fill="rgb(242,14,37)"/><text x="7.6186%" y="367.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (5 samples, 0.03%)</title><rect x="7.3686%" y="341" width="0.0347%" height="15" fill="rgb(246,228,12)"/><text x="7.6186%" y="351.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (5 samples, 0.03%)</title><rect x="7.3686%" y="325" width="0.0347%" height="15" fill="rgb(213,55,15)"/><text x="7.6186%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3 samples, 0.02%)</title><rect x="7.3825%" y="309" width="0.0208%" height="15" fill="rgb(209,9,3)"/><text x="7.6325%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (2 samples, 0.01%)</title><rect x="7.3894%" y="293" width="0.0139%" height="15" fill="rgb(230,59,30)"/><text x="7.6394%" y="303.50"></text></g><g><title>core::intrinsics::copy (4 samples, 0.03%)</title><rect x="7.4172%" y="325" width="0.0278%" height="15" fill="rgb(209,121,21)"/><text x="7.6672%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (9 samples, 0.06%)</title><rect x="7.4033%" y="357" width="0.0625%" height="15" fill="rgb(220,109,13)"/><text x="7.6533%" y="367.50"></text></g><g><title>core::ptr::swap (7 samples, 0.05%)</title><rect x="7.4172%" y="341" width="0.0486%" height="15" fill="rgb(232,18,1)"/><text x="7.6672%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="7.4450%" y="325" width="0.0208%" height="15" fill="rgb(215,41,42)"/><text x="7.6950%" y="335.50"></text></g><g><title>&lt;u32 as rand::distributions::utils::WideningMultiply&gt;::wmul (7 samples, 0.05%)</title><rect x="7.5422%" y="277" width="0.0486%" height="15" fill="rgb(224,123,36)"/><text x="7.7922%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="7.5908%" y="277" width="0.0139%" height="15" fill="rgb(240,125,3)"/><text x="7.8408%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.02%)</title><rect x="7.7783%" y="69" width="0.0208%" height="15" fill="rgb(205,98,50)"/><text x="8.0283%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (3 samples, 0.02%)</title><rect x="7.7783%" y="53" width="0.0208%" height="15" fill="rgb(205,185,37)"/><text x="8.0283%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (3 samples, 0.02%)</title><rect x="7.7783%" y="37" width="0.0208%" height="15" fill="rgb(238,207,15)"/><text x="8.0283%" y="47.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.01%)</title><rect x="7.7992%" y="69" width="0.0139%" height="15" fill="rgb(213,199,42)"/><text x="8.0492%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (2 samples, 0.01%)</title><rect x="7.7992%" y="53" width="0.0139%" height="15" fill="rgb(235,201,11)"/><text x="8.0492%" y="63.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (34 samples, 0.24%)</title><rect x="7.6047%" y="213" width="0.2361%" height="15" fill="rgb(207,46,11)"/><text x="7.8547%" y="223.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (10 samples, 0.07%)</title><rect x="7.7714%" y="197" width="0.0694%" height="15" fill="rgb(241,35,35)"/><text x="8.0214%" y="207.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (10 samples, 0.07%)</title><rect x="7.7714%" y="181" width="0.0694%" height="15" fill="rgb(243,32,47)"/><text x="8.0214%" y="191.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (10 samples, 0.07%)</title><rect x="7.7714%" y="165" width="0.0694%" height="15" fill="rgb(247,202,23)"/><text x="8.0214%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide (10 samples, 0.07%)</title><rect x="7.7714%" y="149" width="0.0694%" height="15" fill="rgb(219,102,11)"/><text x="8.0214%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (9 samples, 0.06%)</title><rect x="7.7783%" y="133" width="0.0625%" height="15" fill="rgb(243,110,44)"/><text x="8.0283%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (9 samples, 0.06%)</title><rect x="7.7783%" y="117" width="0.0625%" height="15" fill="rgb(222,74,54)"/><text x="8.0283%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (9 samples, 0.06%)</title><rect x="7.7783%" y="101" width="0.0625%" height="15" fill="rgb(216,99,12)"/><text x="8.0283%" y="111.50"></text></g><g><title>rand_chacha::guts::round (9 samples, 0.06%)</title><rect x="7.7783%" y="85" width="0.0625%" height="15" fill="rgb(226,22,26)"/><text x="8.0283%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3 samples, 0.02%)</title><rect x="7.8200%" y="69" width="0.0208%" height="15" fill="rgb(217,163,10)"/><text x="8.0700%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3 samples, 0.02%)</title><rect x="7.8200%" y="53" width="0.0208%" height="15" fill="rgb(213,25,53)"/><text x="8.0700%" y="63.50"></text></g><g><title>rand::rng::Rng::gen (36 samples, 0.25%)</title><rect x="7.6047%" y="277" width="0.2500%" height="15" fill="rgb(252,105,26)"/><text x="7.8547%" y="287.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (36 samples, 0.25%)</title><rect x="7.6047%" y="261" width="0.2500%" height="15" fill="rgb(220,39,43)"/><text x="7.8547%" y="271.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u32 (36 samples, 0.25%)</title><rect x="7.6047%" y="245" width="0.2500%" height="15" fill="rgb(229,68,48)"/><text x="7.8547%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u32 (36 samples, 0.25%)</title><rect x="7.6047%" y="229" width="0.2500%" height="15" fill="rgb(252,8,32)"/><text x="7.8547%" y="239.50"></text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.01%)</title><rect x="7.8408%" y="213" width="0.0139%" height="15" fill="rgb(223,20,43)"/><text x="8.0908%" y="223.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (50 samples, 0.35%)</title><rect x="7.5214%" y="293" width="0.3472%" height="15" fill="rgb(229,81,49)"/><text x="7.7714%" y="303.50"></text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.01%)</title><rect x="7.8547%" y="277" width="0.0139%" height="15" fill="rgb(236,28,36)"/><text x="8.1047%" y="287.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (71 samples, 0.49%)</title><rect x="7.4033%" y="373" width="0.4931%" height="15" fill="rgb(249,185,26)"/><text x="7.6533%" y="383.50"></text></g><g><title>rand::seq::gen_index (62 samples, 0.43%)</title><rect x="7.4658%" y="357" width="0.4306%" height="15" fill="rgb(249,174,33)"/><text x="7.7158%" y="367.50"></text></g><g><title>rand::rng::Rng::gen_range (55 samples, 0.38%)</title><rect x="7.5144%" y="341" width="0.3820%" height="15" fill="rgb(233,201,37)"/><text x="7.7644%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (54 samples, 0.38%)</title><rect x="7.5214%" y="325" width="0.3750%" height="15" fill="rgb(221,78,26)"/><text x="7.7714%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (54 samples, 0.38%)</title><rect x="7.5214%" y="309" width="0.3750%" height="15" fill="rgb(250,127,30)"/><text x="7.7714%" y="319.50"></text></g><g><title>rand::rng::Rng::gen_range (4 samples, 0.03%)</title><rect x="7.8686%" y="293" width="0.0278%" height="15" fill="rgb(230,49,44)"/><text x="8.1186%" y="303.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="7.8964%" y="373" width="0.0139%" height="15" fill="rgb(229,67,23)"/><text x="8.1464%" y="383.50"></text></g><g><title>core::ptr::read (2 samples, 0.01%)</title><rect x="7.8964%" y="357" width="0.0139%" height="15" fill="rgb(249,83,47)"/><text x="8.1464%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="7.8964%" y="341" width="0.0139%" height="15" fill="rgb(215,43,3)"/><text x="8.1464%" y="351.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::neighbour_generator::NeighbourGenerator::generate_all_neighbours (15 samples, 0.10%)</title><rect x="7.9103%" y="373" width="0.1042%" height="15" fill="rgb(238,154,13)"/><text x="8.1603%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (15 samples, 0.10%)</title><rect x="7.9103%" y="357" width="0.1042%" height="15" fill="rgb(219,56,2)"/><text x="8.1603%" y="367.50"></text></g><g><title>core::ptr::write (10 samples, 0.07%)</title><rect x="7.9450%" y="341" width="0.0694%" height="15" fill="rgb(233,0,4)"/><text x="8.1950%" y="351.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (19 samples, 0.13%)</title><rect x="8.0631%" y="341" width="0.1320%" height="15" fill="rgb(235,30,7)"/><text x="8.3131%" y="351.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.08%)</title><rect x="8.6117%" y="325" width="0.0764%" height="15" fill="rgb(250,79,13)"/><text x="8.8617%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="9.7715%" y="309" width="0.0208%" height="15" fill="rgb(211,146,34)"/><text x="10.0215%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="9.7715%" y="293" width="0.0208%" height="15" fill="rgb(228,22,38)"/><text x="10.0215%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="9.7715%" y="277" width="0.0208%" height="15" fill="rgb(235,168,5)"/><text x="10.0215%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="9.7715%" y="261" width="0.0208%" height="15" fill="rgb(221,155,16)"/><text x="10.0215%" y="271.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.09%)</title><rect x="9.7923%" y="309" width="0.0903%" height="15" fill="rgb(215,215,53)"/><text x="10.0423%" y="319.50"></text></g><g><title>__calloc (37 samples, 0.26%)</title><rect x="9.9243%" y="149" width="0.2570%" height="15" fill="rgb(223,4,10)"/><text x="10.1743%" y="159.50"></text></g><g><title>_int_malloc (11 samples, 0.08%)</title><rect x="10.1049%" y="133" width="0.0764%" height="15" fill="rgb(234,103,6)"/><text x="10.3549%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (41 samples, 0.28%)</title><rect x="9.9243%" y="197" width="0.2847%" height="15" fill="rgb(227,97,0)"/><text x="10.1743%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.28%)</title><rect x="9.9243%" y="181" width="0.2847%" height="15" fill="rgb(234,150,53)"/><text x="10.1743%" y="191.50"></text></g><g><title>alloc::alloc::alloc_zeroed (41 samples, 0.28%)</title><rect x="9.9243%" y="165" width="0.2847%" height="15" fill="rgb(228,201,54)"/><text x="10.1743%" y="175.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.03%)</title><rect x="10.1813%" y="149" width="0.0278%" height="15" fill="rgb(222,22,37)"/><text x="10.4313%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (3 samples, 0.02%)</title><rect x="10.1882%" y="133" width="0.0208%" height="15" fill="rgb(237,53,32)"/><text x="10.4382%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.30%)</title><rect x="9.9243%" y="213" width="0.2986%" height="15" fill="rgb(233,25,53)"/><text x="10.1743%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="10.2090%" y="197" width="0.0139%" height="15" fill="rgb(210,40,34)"/><text x="10.4590%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2 samples, 0.01%)</title><rect x="10.2090%" y="181" width="0.0139%" height="15" fill="rgb(241,220,44)"/><text x="10.4590%" y="191.50"></text></g><g><title>alloc::vec::from_elem (44 samples, 0.31%)</title><rect x="9.9243%" y="277" width="0.3056%" height="15" fill="rgb(235,28,35)"/><text x="10.1743%" y="287.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (44 samples, 0.31%)</title><rect x="9.9243%" y="261" width="0.3056%" height="15" fill="rgb(210,56,17)"/><text x="10.1743%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (44 samples, 0.31%)</title><rect x="9.9243%" y="245" width="0.3056%" height="15" fill="rgb(224,130,29)"/><text x="10.1743%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (44 samples, 0.31%)</title><rect x="9.9243%" y="229" width="0.3056%" height="15" fill="rgb(235,212,8)"/><text x="10.1743%" y="239.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (88 samples, 0.61%)</title><rect x="9.8965%" y="293" width="0.6112%" height="15" fill="rgb(223,33,50)"/><text x="10.1465%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (40 samples, 0.28%)</title><rect x="10.2299%" y="277" width="0.2778%" height="15" fill="rgb(219,149,13)"/><text x="10.4799%" y="287.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (25 samples, 0.17%)</title><rect x="10.3341%" y="261" width="0.1736%" height="15" fill="rgb(250,156,29)"/><text x="10.5841%" y="271.50"></text></g><g><title>ndarray::extension::nonnull::nonnull_from_vec_data (6 samples, 0.04%)</title><rect x="10.4660%" y="245" width="0.0417%" height="15" fill="rgb(216,193,19)"/><text x="10.7160%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (6 samples, 0.04%)</title><rect x="10.4660%" y="229" width="0.0417%" height="15" fill="rgb(216,135,14)"/><text x="10.7160%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.04%)</title><rect x="10.4660%" y="213" width="0.0417%" height="15" fill="rgb(241,47,5)"/><text x="10.7160%" y="223.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (92 samples, 0.64%)</title><rect x="9.8826%" y="309" width="0.6389%" height="15" fill="rgb(233,42,35)"/><text x="10.1326%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (2 samples, 0.01%)</title><rect x="10.5077%" y="293" width="0.0139%" height="15" fill="rgb(231,13,6)"/><text x="10.7577%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::len (24 samples, 0.17%)</title><rect x="10.5216%" y="309" width="0.1667%" height="15" fill="rgb(207,181,40)"/><text x="10.7716%" y="319.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::size (24 samples, 0.17%)</title><rect x="10.5216%" y="293" width="0.1667%" height="15" fill="rgb(254,173,49)"/><text x="10.7716%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.09%)</title><rect x="11.3827%" y="277" width="0.0903%" height="15" fill="rgb(221,1,38)"/><text x="11.6327%" y="287.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.09%)</title><rect x="11.3827%" y="261" width="0.0903%" height="15" fill="rgb(206,124,46)"/><text x="11.6327%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.09%)</title><rect x="11.3827%" y="245" width="0.0903%" height="15" fill="rgb(249,21,11)"/><text x="11.6327%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (5 samples, 0.03%)</title><rect x="11.4383%" y="229" width="0.0347%" height="15" fill="rgb(222,201,40)"/><text x="11.6883%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (154 samples, 1.07%)</title><rect x="12.9731%" y="245" width="1.0695%" height="15" fill="rgb(235,61,29)"/><text x="13.2231%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (170 samples, 1.18%)</title><rect x="12.9731%" y="261" width="1.1806%" height="15" fill="rgb(219,207,3)"/><text x="13.2231%" y="271.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (16 samples, 0.11%)</title><rect x="14.0426%" y="245" width="0.1111%" height="15" fill="rgb(222,56,46)"/><text x="14.2926%" y="255.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.05%)</title><rect x="14.1538%" y="181" width="0.0486%" height="15" fill="rgb(239,76,54)"/><text x="14.4038%" y="191.50"></text></g><g><title>core::cmp::min (13 samples, 0.09%)</title><rect x="14.1538%" y="213" width="0.0903%" height="15" fill="rgb(231,124,27)"/><text x="14.4038%" y="223.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.09%)</title><rect x="14.1538%" y="197" width="0.0903%" height="15" fill="rgb(249,195,6)"/><text x="14.4038%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (6 samples, 0.04%)</title><rect x="14.2024%" y="181" width="0.0417%" height="15" fill="rgb(237,174,47)"/><text x="14.4524%" y="191.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.09%)</title><rect x="14.2440%" y="197" width="0.0903%" height="15" fill="rgb(206,201,31)"/><text x="14.4940%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (28 samples, 0.19%)</title><rect x="14.1538%" y="261" width="0.1945%" height="15" fill="rgb(231,57,52)"/><text x="14.4038%" y="271.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (28 samples, 0.19%)</title><rect x="14.1538%" y="245" width="0.1945%" height="15" fill="rgb(248,177,22)"/><text x="14.4038%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (28 samples, 0.19%)</title><rect x="14.1538%" y="229" width="0.1945%" height="15" fill="rgb(215,211,37)"/><text x="14.4038%" y="239.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccess::size (15 samples, 0.10%)</title><rect x="14.2440%" y="213" width="0.1042%" height="15" fill="rgb(241,128,51)"/><text x="14.4940%" y="223.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.01%)</title><rect x="14.3343%" y="197" width="0.0139%" height="15" fill="rgb(227,165,31)"/><text x="14.5843%" y="207.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent (36 samples, 0.25%)</title><rect x="14.3482%" y="261" width="0.2500%" height="15" fill="rgb(228,167,24)"/><text x="14.5982%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (36 samples, 0.25%)</title><rect x="14.3482%" y="245" width="0.2500%" height="15" fill="rgb(228,143,12)"/><text x="14.5982%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.25%)</title><rect x="14.3482%" y="229" width="0.2500%" height="15" fill="rgb(249,149,8)"/><text x="14.5982%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.25%)</title><rect x="14.3482%" y="213" width="0.2500%" height="15" fill="rgb(243,35,44)"/><text x="14.5982%" y="223.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (36 samples, 0.25%)</title><rect x="14.3482%" y="197" width="0.2500%" height="15" fill="rgb(246,89,9)"/><text x="14.5982%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (36 samples, 0.25%)</title><rect x="14.3482%" y="181" width="0.2500%" height="15" fill="rgb(233,213,13)"/><text x="14.5982%" y="191.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent::{{closure}} (36 samples, 0.25%)</title><rect x="14.3482%" y="165" width="0.2500%" height="15" fill="rgb(233,141,41)"/><text x="14.5982%" y="175.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (27 samples, 0.19%)</title><rect x="14.5982%" y="261" width="0.1875%" height="15" fill="rgb(239,167,4)"/><text x="14.8482%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (25 samples, 0.17%)</title><rect x="14.6121%" y="245" width="0.1736%" height="15" fill="rgb(209,217,16)"/><text x="14.8621%" y="255.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (25 samples, 0.17%)</title><rect x="14.6121%" y="229" width="0.1736%" height="15" fill="rgb(219,88,35)"/><text x="14.8621%" y="239.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (25 samples, 0.17%)</title><rect x="14.6121%" y="213" width="0.1736%" height="15" fill="rgb(220,193,23)"/><text x="14.8621%" y="223.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (10 samples, 0.07%)</title><rect x="14.8066%" y="213" width="0.0694%" height="15" fill="rgb(230,90,52)"/><text x="15.0566%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order_mut (25 samples, 0.17%)</title><rect x="14.7857%" y="261" width="0.1736%" height="15" fill="rgb(252,106,19)"/><text x="15.0357%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (22 samples, 0.15%)</title><rect x="14.8066%" y="245" width="0.1528%" height="15" fill="rgb(206,74,20)"/><text x="15.0566%" y="255.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (22 samples, 0.15%)</title><rect x="14.8066%" y="229" width="0.1528%" height="15" fill="rgb(230,138,44)"/><text x="15.0566%" y="239.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::equal (12 samples, 0.08%)</title><rect x="14.8760%" y="213" width="0.0833%" height="15" fill="rgb(235,182,43)"/><text x="15.1260%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (646 samples, 4.49%)</title><rect x="11.4730%" y="277" width="4.4864%" height="15" fill="rgb(242,16,51)"/><text x="11.7230%" y="287.50">ndarr..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add::{{closure}} (143 samples, 0.99%)</title><rect x="14.9663%" y="261" width="0.9931%" height="15" fill="rgb(248,9,4)"/><text x="15.2163%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (111 samples, 0.77%)</title><rect x="15.1886%" y="245" width="0.7709%" height="15" fill="rgb(210,31,22)"/><text x="15.4386%" y="255.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (778 samples, 5.40%)</title><rect x="10.6882%" y="309" width="5.4032%" height="15" fill="rgb(239,54,39)"/><text x="10.9382%" y="319.50">ndarray..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (728 samples, 5.06%)</title><rect x="11.0355%" y="293" width="5.0559%" height="15" fill="rgb(230,99,41)"/><text x="11.2855%" y="303.50">ndarra..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (19 samples, 0.13%)</title><rect x="15.9594%" y="277" width="0.1320%" height="15" fill="rgb(253,106,12)"/><text x="16.2094%" y="287.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="16.0914%" y="261" width="0.0278%" height="15" fill="rgb(213,46,41)"/><text x="16.3414%" y="271.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (22 samples, 0.15%)</title><rect x="16.0914%" y="277" width="0.1528%" height="15" fill="rgb(215,133,35)"/><text x="16.3414%" y="287.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div::{{closure}} (18 samples, 0.13%)</title><rect x="16.1192%" y="261" width="0.1250%" height="15" fill="rgb(213,28,5)"/><text x="16.3692%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (11 samples, 0.08%)</title><rect x="16.1678%" y="245" width="0.0764%" height="15" fill="rgb(215,77,49)"/><text x="16.4178%" y="255.50"></text></g><g><title>ndarray::ArrayBase&lt;S,D&gt;::unordered_foreach_mut (25 samples, 0.17%)</title><rect x="16.0914%" y="293" width="0.1736%" height="15" fill="rgb(248,100,22)"/><text x="16.3414%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order_mut (3 samples, 0.02%)</title><rect x="16.2442%" y="277" width="0.0208%" height="15" fill="rgb(208,67,9)"/><text x="16.4942%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (2 samples, 0.01%)</title><rect x="16.2511%" y="261" width="0.0139%" height="15" fill="rgb(219,133,21)"/><text x="16.5011%" y="271.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.01%)</title><rect x="16.2511%" y="245" width="0.0139%" height="15" fill="rgb(246,46,29)"/><text x="16.5011%" y="255.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::calculate_centroid (1,092 samples, 7.58%)</title><rect x="8.6881%" y="325" width="7.5839%" height="15" fill="rgb(246,185,52)"/><text x="8.9381%" y="335.50">PracticasM..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (26 samples, 0.18%)</title><rect x="16.0914%" y="309" width="0.1806%" height="15" fill="rgb(252,136,11)"/><text x="16.3414%" y="319.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (17 samples, 0.12%)</title><rect x="16.4109%" y="309" width="0.1181%" height="15" fill="rgb(219,138,53)"/><text x="16.6609%" y="319.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (33 samples, 0.23%)</title><rect x="16.5498%" y="181" width="0.2292%" height="15" fill="rgb(211,51,23)"/><text x="16.7998%" y="191.50"></text></g><g><title>__GI___libc_free (754 samples, 5.24%)</title><rect x="16.9803%" y="165" width="5.2365%" height="15" fill="rgb(247,221,28)"/><text x="17.2303%" y="175.50">__GI__..</text></g><g><title>_int_free (490 samples, 3.40%)</title><rect x="18.8138%" y="149" width="3.4030%" height="15" fill="rgb(251,222,45)"/><text x="19.0638%" y="159.50">_in..</text></g><g><title>__rdl_dealloc (22 samples, 0.15%)</title><rect x="22.2168%" y="165" width="0.1528%" height="15" fill="rgb(217,162,53)"/><text x="22.4668%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 0.15%)</title><rect x="22.2168%" y="149" width="0.1528%" height="15" fill="rgb(229,93,14)"/><text x="22.4668%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (875 samples, 6.08%)</title><rect x="16.5428%" y="197" width="6.0768%" height="15" fill="rgb(209,67,49)"/><text x="16.7928%" y="207.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (841 samples, 5.84%)</title><rect x="16.7789%" y="181" width="5.8407%" height="15" fill="rgb(213,87,29)"/><text x="17.0289%" y="191.50">alloc::..</text></g><g><title>__rust_dealloc (36 samples, 0.25%)</title><rect x="22.3696%" y="165" width="0.2500%" height="15" fill="rgb(205,151,52)"/><text x="22.6196%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (879 samples, 6.10%)</title><rect x="16.5428%" y="245" width="6.1046%" height="15" fill="rgb(253,215,39)"/><text x="16.7928%" y="255.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (879 samples, 6.10%)</title><rect x="16.5428%" y="229" width="6.1046%" height="15" fill="rgb(221,220,41)"/><text x="16.7928%" y="239.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (879 samples, 6.10%)</title><rect x="16.5428%" y="213" width="6.1046%" height="15" fill="rgb(218,133,21)"/><text x="16.7928%" y="223.50">&lt;alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="22.6196%" y="197" width="0.0278%" height="15" fill="rgb(221,193,43)"/><text x="22.8696%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (930 samples, 6.46%)</title><rect x="16.5289%" y="293" width="6.4588%" height="15" fill="rgb(240,128,52)"/><text x="16.7789%" y="303.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (930 samples, 6.46%)</title><rect x="16.5289%" y="277" width="6.4588%" height="15" fill="rgb(253,114,12)"/><text x="16.7789%" y="287.50">core::pt..</text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (930 samples, 6.46%)</title><rect x="16.5289%" y="261" width="6.4588%" height="15" fill="rgb(215,223,47)"/><text x="16.7789%" y="271.50">&lt;ndarray..</text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::take_as_vec (49 samples, 0.34%)</title><rect x="22.6474%" y="245" width="0.3403%" height="15" fill="rgb(248,225,23)"/><text x="22.8974%" y="255.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;I&gt; as core::clone::Clone&gt;::clone (17 samples, 0.12%)</title><rect x="23.2933%" y="261" width="0.1181%" height="15" fill="rgb(250,108,0)"/><text x="23.5433%" y="271.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (26 samples, 0.18%)</title><rect x="23.4183%" y="261" width="0.1806%" height="15" fill="rgb(228,208,7)"/><text x="23.6683%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (5 samples, 0.03%)</title><rect x="23.5989%" y="213" width="0.0347%" height="15" fill="rgb(244,45,10)"/><text x="23.8489%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (6 samples, 0.04%)</title><rect x="23.5989%" y="261" width="0.0417%" height="15" fill="rgb(207,125,25)"/><text x="23.8489%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (6 samples, 0.04%)</title><rect x="23.5989%" y="245" width="0.0417%" height="15" fill="rgb(210,195,18)"/><text x="23.8489%" y="255.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (6 samples, 0.04%)</title><rect x="23.5989%" y="229" width="0.0417%" height="15" fill="rgb(249,80,12)"/><text x="23.8489%" y="239.50"></text></g><g><title>__GI___libc_malloc (283 samples, 1.97%)</title><rect x="23.8628%" y="133" width="1.9654%" height="15" fill="rgb(221,65,9)"/><text x="24.1128%" y="143.50">_..</text></g><g><title>__rdl_alloc (43 samples, 0.30%)</title><rect x="25.8282%" y="133" width="0.2986%" height="15" fill="rgb(235,49,36)"/><text x="26.0782%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (42 samples, 0.29%)</title><rect x="25.8351%" y="117" width="0.2917%" height="15" fill="rgb(225,32,20)"/><text x="26.0851%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (361 samples, 2.51%)</title><rect x="23.7447%" y="197" width="2.5071%" height="15" fill="rgb(215,141,46)"/><text x="23.9947%" y="207.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (361 samples, 2.51%)</title><rect x="23.7447%" y="181" width="2.5071%" height="15" fill="rgb(250,160,47)"/><text x="23.9947%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (361 samples, 2.51%)</title><rect x="23.7447%" y="165" width="2.5071%" height="15" fill="rgb(216,222,40)"/><text x="23.9947%" y="175.50">al..</text></g><g><title>alloc::alloc::alloc (345 samples, 2.40%)</title><rect x="23.8558%" y="149" width="2.3960%" height="15" fill="rgb(234,217,39)"/><text x="24.1058%" y="159.50">al..</text></g><g><title>__rust_alloc (18 samples, 0.13%)</title><rect x="26.1268%" y="133" width="0.1250%" height="15" fill="rgb(207,178,40)"/><text x="26.3768%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (397 samples, 2.76%)</title><rect x="23.6405%" y="245" width="2.7571%" height="15" fill="rgb(221,136,13)"/><text x="23.8905%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (382 samples, 2.65%)</title><rect x="23.7447%" y="229" width="2.6530%" height="15" fill="rgb(249,199,10)"/><text x="23.9947%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (382 samples, 2.65%)</title><rect x="23.7447%" y="213" width="2.6530%" height="15" fill="rgb(249,222,13)"/><text x="23.9947%" y="223.50">al..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (21 samples, 0.15%)</title><rect x="26.2518%" y="197" width="0.1458%" height="15" fill="rgb(244,185,38)"/><text x="26.5018%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.51%)</title><rect x="26.4254%" y="229" width="0.5070%" height="15" fill="rgb(236,202,9)"/><text x="26.6754%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (18 samples, 0.13%)</title><rect x="26.9324%" y="229" width="0.1250%" height="15" fill="rgb(250,229,37)"/><text x="27.1824%" y="239.50"></text></g><g><title>core::ptr::write (8 samples, 0.06%)</title><rect x="27.0574%" y="213" width="0.0556%" height="15" fill="rgb(206,174,23)"/><text x="27.3074%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (136 samples, 0.94%)</title><rect x="26.3977%" y="245" width="0.9445%" height="15" fill="rgb(211,33,43)"/><text x="26.6477%" y="255.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::{{closure}} (41 samples, 0.28%)</title><rect x="27.0574%" y="229" width="0.2847%" height="15" fill="rgb(245,58,50)"/><text x="27.3074%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::{{closure}} (33 samples, 0.23%)</title><rect x="27.1130%" y="213" width="0.2292%" height="15" fill="rgb(244,68,36)"/><text x="27.3630%" y="223.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to::{{closure}} (33 samples, 0.23%)</title><rect x="27.1130%" y="197" width="0.2292%" height="15" fill="rgb(232,229,15)"/><text x="27.3630%" y="207.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (606 samples, 4.21%)</title><rect x="23.2377%" y="277" width="4.2086%" height="15" fill="rgb(254,30,23)"/><text x="23.4877%" y="287.50">ndarr..</text></g><g><title>ndarray::iterators::to_vec_mapped (548 samples, 3.81%)</title><rect x="23.6405%" y="261" width="3.8058%" height="15" fill="rgb(235,160,14)"/><text x="23.8905%" y="271.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (15 samples, 0.10%)</title><rect x="27.3422%" y="245" width="0.1042%" height="15" fill="rgb(212,155,44)"/><text x="27.5922%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (1,020 samples, 7.08%)</title><rect x="22.9877%" y="293" width="7.0838%" height="15" fill="rgb(226,2,50)"/><text x="23.2377%" y="303.50">ndarray::i..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (378 samples, 2.63%)</title><rect x="27.4464%" y="277" width="2.6252%" height="15" fill="rgb(234,177,6)"/><text x="27.6964%" y="287.50">nd..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (47 samples, 0.33%)</title><rect x="30.2938%" y="197" width="0.3264%" height="15" fill="rgb(217,24,9)"/><text x="30.5438%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.19%)</title><rect x="30.4327%" y="181" width="0.1875%" height="15" fill="rgb(220,13,46)"/><text x="30.6827%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (25 samples, 0.17%)</title><rect x="30.4466%" y="165" width="0.1736%" height="15" fill="rgb(239,221,27)"/><text x="30.6966%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (22 samples, 0.15%)</title><rect x="30.4674%" y="149" width="0.1528%" height="15" fill="rgb(222,198,25)"/><text x="30.7174%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (22 samples, 0.15%)</title><rect x="30.4674%" y="133" width="0.1528%" height="15" fill="rgb(211,99,13)"/><text x="30.7174%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (10 samples, 0.07%)</title><rect x="30.6202%" y="197" width="0.0694%" height="15" fill="rgb(232,111,31)"/><text x="30.8702%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.06%)</title><rect x="30.6896%" y="197" width="0.0625%" height="15" fill="rgb(245,82,37)"/><text x="30.9396%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.06%)</title><rect x="30.6896%" y="181" width="0.0625%" height="15" fill="rgb(227,149,46)"/><text x="30.9396%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (167 samples, 1.16%)</title><rect x="30.7521%" y="197" width="1.1598%" height="15" fill="rgb(218,36,50)"/><text x="31.0021%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (167 samples, 1.16%)</title><rect x="30.7521%" y="181" width="1.1598%" height="15" fill="rgb(226,80,48)"/><text x="31.0021%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (148 samples, 1.03%)</title><rect x="30.8841%" y="165" width="1.0278%" height="15" fill="rgb(238,224,15)"/><text x="31.1341%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (256 samples, 1.78%)</title><rect x="30.1410%" y="229" width="1.7779%" height="15" fill="rgb(241,136,10)"/><text x="30.3910%" y="239.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (256 samples, 1.78%)</title><rect x="30.1410%" y="213" width="1.7779%" height="15" fill="rgb(208,32,45)"/><text x="30.3910%" y="223.50">&lt;..</text></g><g><title>__GI___libc_malloc (246 samples, 1.71%)</title><rect x="32.2592%" y="117" width="1.7085%" height="15" fill="rgb(207,135,9)"/><text x="32.5092%" y="127.50"></text></g><g><title>__rdl_alloc (39 samples, 0.27%)</title><rect x="33.9676%" y="117" width="0.2709%" height="15" fill="rgb(206,86,44)"/><text x="34.2176%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.27%)</title><rect x="33.9676%" y="101" width="0.2709%" height="15" fill="rgb(245,177,15)"/><text x="34.2176%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (344 samples, 2.39%)</title><rect x="32.0717%" y="165" width="2.3891%" height="15" fill="rgb(206,64,50)"/><text x="32.3217%" y="175.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (344 samples, 2.39%)</title><rect x="32.0717%" y="149" width="2.3891%" height="15" fill="rgb(234,36,40)"/><text x="32.3217%" y="159.50">al..</text></g><g><title>alloc::alloc::alloc (332 samples, 2.31%)</title><rect x="32.1550%" y="133" width="2.3057%" height="15" fill="rgb(213,64,8)"/><text x="32.4050%" y="143.50">a..</text></g><g><title>__rust_alloc (32 samples, 0.22%)</title><rect x="34.2385%" y="117" width="0.2222%" height="15" fill="rgb(210,75,36)"/><text x="34.4885%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (371 samples, 2.58%)</title><rect x="32.0717%" y="181" width="2.5766%" height="15" fill="rgb(229,88,21)"/><text x="32.3217%" y="191.50">al..</text></g><g><title>core::alloc::layout::Layout::array (27 samples, 0.19%)</title><rect x="34.4607%" y="165" width="0.1875%" height="15" fill="rgb(252,204,47)"/><text x="34.7107%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat (27 samples, 0.19%)</title><rect x="34.4607%" y="149" width="0.1875%" height="15" fill="rgb(208,77,27)"/><text x="34.7107%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (15 samples, 0.10%)</title><rect x="34.5441%" y="133" width="0.1042%" height="15" fill="rgb(221,76,26)"/><text x="34.7941%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.10%)</title><rect x="34.5441%" y="117" width="0.1042%" height="15" fill="rgb(225,139,18)"/><text x="34.7941%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (403 samples, 2.80%)</title><rect x="31.9189%" y="229" width="2.7988%" height="15" fill="rgb(230,137,11)"/><text x="32.1689%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (381 samples, 2.65%)</title><rect x="32.0717%" y="213" width="2.6460%" height="15" fill="rgb(212,28,1)"/><text x="32.3217%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (381 samples, 2.65%)</title><rect x="32.0717%" y="197" width="2.6460%" height="15" fill="rgb(248,164,17)"/><text x="32.3217%" y="207.50">al..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (10 samples, 0.07%)</title><rect x="34.6482%" y="181" width="0.0694%" height="15" fill="rgb(222,171,42)"/><text x="34.8982%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (660 samples, 4.58%)</title><rect x="30.1410%" y="261" width="4.5837%" height="15" fill="rgb(243,84,45)"/><text x="30.3910%" y="271.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (660 samples, 4.58%)</title><rect x="30.1410%" y="245" width="4.5837%" height="15" fill="rgb(252,49,23)"/><text x="30.3910%" y="255.50">alloc..</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (122 samples, 0.85%)</title><rect x="34.7246%" y="261" width="0.8473%" height="15" fill="rgb(215,19,7)"/><text x="34.9746%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (16 samples, 0.11%)</title><rect x="35.6900%" y="213" width="0.1111%" height="15" fill="rgb(238,81,41)"/><text x="35.9400%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (34 samples, 0.24%)</title><rect x="35.5719%" y="261" width="0.2361%" height="15" fill="rgb(210,199,37)"/><text x="35.8219%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (17 samples, 0.12%)</title><rect x="35.6900%" y="245" width="0.1181%" height="15" fill="rgb(244,192,49)"/><text x="35.9400%" y="255.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (17 samples, 0.12%)</title><rect x="35.6900%" y="229" width="0.1181%" height="15" fill="rgb(226,211,11)"/><text x="35.9400%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (826 samples, 5.74%)</title><rect x="30.1063%" y="277" width="5.7365%" height="15" fill="rgb(236,162,54)"/><text x="30.3563%" y="287.50">ndarray..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (5 samples, 0.03%)</title><rect x="35.8080%" y="261" width="0.0347%" height="15" fill="rgb(220,229,9)"/><text x="36.0580%" y="271.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (457 samples, 3.17%)</title><rect x="35.8428%" y="277" width="3.1738%" height="15" fill="rgb(250,87,22)"/><text x="36.0928%" y="287.50">nda..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (122 samples, 0.85%)</title><rect x="40.0028%" y="213" width="0.8473%" height="15" fill="rgb(239,43,17)"/><text x="40.2528%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.90%)</title><rect x="40.0028%" y="229" width="0.9028%" height="15" fill="rgb(231,177,25)"/><text x="40.2528%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (8 samples, 0.06%)</title><rect x="40.8501%" y="213" width="0.0556%" height="15" fill="rgb(219,179,1)"/><text x="41.1001%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (16 samples, 0.11%)</title><rect x="40.9056%" y="229" width="0.1111%" height="15" fill="rgb(238,219,53)"/><text x="41.1556%" y="239.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (16 samples, 0.11%)</title><rect x="40.9056%" y="213" width="0.1111%" height="15" fill="rgb(232,167,36)"/><text x="41.1556%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (16 samples, 0.11%)</title><rect x="40.9056%" y="197" width="0.1111%" height="15" fill="rgb(244,19,51)"/><text x="41.1556%" y="207.50"></text></g><g><title>core::cmp::min (16 samples, 0.11%)</title><rect x="40.9056%" y="181" width="0.1111%" height="15" fill="rgb(224,6,22)"/><text x="41.1556%" y="191.50"></text></g><g><title>core::cmp::Ord::min (16 samples, 0.11%)</title><rect x="40.9056%" y="165" width="0.1111%" height="15" fill="rgb(224,145,5)"/><text x="41.1556%" y="175.50"></text></g><g><title>core::cmp::min_by (16 samples, 0.11%)</title><rect x="40.9056%" y="149" width="0.1111%" height="15" fill="rgb(234,130,49)"/><text x="41.1556%" y="159.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent (17 samples, 0.12%)</title><rect x="41.0167%" y="229" width="0.1181%" height="15" fill="rgb(254,6,2)"/><text x="41.2667%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (17 samples, 0.12%)</title><rect x="41.0167%" y="213" width="0.1181%" height="15" fill="rgb(208,96,46)"/><text x="41.2667%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 0.12%)</title><rect x="41.0167%" y="197" width="0.1181%" height="15" fill="rgb(239,3,39)"/><text x="41.2667%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.12%)</title><rect x="41.0167%" y="181" width="0.1181%" height="15" fill="rgb(233,210,1)"/><text x="41.2667%" y="191.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (17 samples, 0.12%)</title><rect x="41.0167%" y="165" width="0.1181%" height="15" fill="rgb(244,137,37)"/><text x="41.2667%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (17 samples, 0.12%)</title><rect x="41.0167%" y="149" width="0.1181%" height="15" fill="rgb(240,136,2)"/><text x="41.2667%" y="159.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::strides_equivalent::{{closure}} (17 samples, 0.12%)</title><rect x="41.0167%" y="133" width="0.1181%" height="15" fill="rgb(239,18,37)"/><text x="41.2667%" y="143.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (20 samples, 0.14%)</title><rect x="41.1348%" y="229" width="0.1389%" height="15" fill="rgb(218,185,22)"/><text x="41.3848%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (20 samples, 0.14%)</title><rect x="41.1348%" y="213" width="0.1389%" height="15" fill="rgb(225,218,4)"/><text x="41.3848%" y="223.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (20 samples, 0.14%)</title><rect x="41.1348%" y="197" width="0.1389%" height="15" fill="rgb(230,182,32)"/><text x="41.3848%" y="207.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (20 samples, 0.14%)</title><rect x="41.1348%" y="181" width="0.1389%" height="15" fill="rgb(242,56,43)"/><text x="41.3848%" y="191.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (4 samples, 0.03%)</title><rect x="41.2737%" y="229" width="0.0278%" height="15" fill="rgb(233,99,24)"/><text x="41.5237%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (1,661 samples, 11.54%)</title><rect x="30.0715%" y="293" width="11.5355%" height="15" fill="rgb(234,209,42)"/><text x="30.3215%" y="303.50">ndarray::impl_ops..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (373 samples, 2.59%)</title><rect x="39.0166%" y="277" width="2.5905%" height="15" fill="rgb(227,7,12)"/><text x="39.2666%" y="287.50">nd..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (264 samples, 1.83%)</title><rect x="39.7736%" y="261" width="1.8335%" height="15" fill="rgb(245,203,43)"/><text x="40.0236%" y="271.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (264 samples, 1.83%)</title><rect x="39.7736%" y="245" width="1.8335%" height="15" fill="rgb(238,205,33)"/><text x="40.0236%" y="255.50">n..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub::{{closure}} (44 samples, 0.31%)</title><rect x="41.3015%" y="229" width="0.3056%" height="15" fill="rgb(231,56,7)"/><text x="41.5515%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (25 samples, 0.17%)</title><rect x="41.4334%" y="213" width="0.1736%" height="15" fill="rgb(244,186,29)"/><text x="41.6834%" y="223.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (17 samples, 0.12%)</title><rect x="41.6071%" y="277" width="0.1181%" height="15" fill="rgb(234,111,31)"/><text x="41.8571%" y="287.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (21 samples, 0.15%)</title><rect x="41.7321%" y="261" width="0.1458%" height="15" fill="rgb(241,149,10)"/><text x="41.9821%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (21 samples, 0.15%)</title><rect x="41.7321%" y="245" width="0.1458%" height="15" fill="rgb(249,206,44)"/><text x="41.9821%" y="255.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (21 samples, 0.15%)</title><rect x="41.7321%" y="229" width="0.1458%" height="15" fill="rgb(251,153,30)"/><text x="41.9821%" y="239.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 1]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::default_strides (21 samples, 0.15%)</title><rect x="41.7321%" y="213" width="0.1458%" height="15" fill="rgb(239,152,38)"/><text x="41.9821%" y="223.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (22 samples, 0.15%)</title><rect x="41.8779%" y="261" width="0.1528%" height="15" fill="rgb(249,139,47)"/><text x="42.1279%" y="271.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::scalar_sum (247 samples, 1.72%)</title><rect x="41.6071%" y="293" width="1.7154%" height="15" fill="rgb(244,64,35)"/><text x="41.8571%" y="303.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (230 samples, 1.60%)</title><rect x="41.7251%" y="277" width="1.5973%" height="15" fill="rgb(216,46,15)"/><text x="41.9751%" y="287.50"></text></g><g><title>ndarray::numeric_util::unrolled_fold (186 samples, 1.29%)</title><rect x="42.0307%" y="261" width="1.2918%" height="15" fill="rgb(250,74,19)"/><text x="42.2807%" y="271.50"></text></g><g><title>core::ops::function::Fn::call (185 samples, 1.28%)</title><rect x="42.0376%" y="245" width="1.2848%" height="15" fill="rgb(249,42,33)"/><text x="42.2876%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (185 samples, 1.28%)</title><rect x="42.0376%" y="229" width="1.2848%" height="15" fill="rgb(242,149,17)"/><text x="42.2876%" y="239.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance (3,951 samples, 27.44%)</title><rect x="16.2720%" y="325" width="27.4394%" height="15" fill="rgb(244,29,21)"/><text x="16.5220%" y="335.50">PracticasMetaheuristicas::problem_datatypes:..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::point::Point::distance_to (3,914 samples, 27.18%)</title><rect x="16.5289%" y="309" width="27.1824%" height="15" fill="rgb(220,130,37)"/><text x="16.7789%" y="319.50">PracticasMetaheuristicas::problem_datatypes:..</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (56 samples, 0.39%)</title><rect x="43.3225%" y="293" width="0.3889%" height="15" fill="rgb(211,67,2)"/><text x="43.5725%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.22%)</title><rect x="45.6282%" y="293" width="0.2222%" height="15" fill="rgb(235,68,52)"/><text x="45.8782%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (47 samples, 0.33%)</title><rect x="45.6282%" y="309" width="0.3264%" height="15" fill="rgb(246,142,3)"/><text x="45.8782%" y="319.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.10%)</title><rect x="45.8504%" y="293" width="0.1042%" height="15" fill="rgb(241,25,7)"/><text x="46.1004%" y="303.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.10%)</title><rect x="45.8504%" y="277" width="0.1042%" height="15" fill="rgb(242,119,39)"/><text x="46.1004%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 1.20%)</title><rect x="45.9546%" y="309" width="1.2015%" height="15" fill="rgb(241,98,45)"/><text x="46.2046%" y="319.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 1.20%)</title><rect x="45.9546%" y="293" width="1.2015%" height="15" fill="rgb(254,28,30)"/><text x="46.2046%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (7 samples, 0.05%)</title><rect x="47.4061%" y="293" width="0.0486%" height="15" fill="rgb(241,142,54)"/><text x="47.6561%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.05%)</title><rect x="47.4061%" y="277" width="0.0486%" height="15" fill="rgb(222,85,15)"/><text x="47.6561%" y="287.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.17%)</title><rect x="47.5311%" y="213" width="0.1667%" height="15" fill="rgb(210,85,47)"/><text x="47.7811%" y="223.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="47.6978%" y="213" width="0.0139%" height="15" fill="rgb(224,206,25)"/><text x="47.9478%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.01%)</title><rect x="47.6978%" y="197" width="0.0139%" height="15" fill="rgb(243,201,19)"/><text x="47.9478%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.19%)</title><rect x="47.5241%" y="229" width="0.1945%" height="15" fill="rgb(236,59,4)"/><text x="47.7741%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (9 samples, 0.06%)</title><rect x="47.7186%" y="229" width="0.0625%" height="15" fill="rgb(254,179,45)"/><text x="47.9686%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.02%)</title><rect x="47.8089%" y="213" width="0.0208%" height="15" fill="rgb(226,14,10)"/><text x="48.0589%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="47.8089%" y="197" width="0.0208%" height="15" fill="rgb(244,27,41)"/><text x="48.0589%" y="207.50"></text></g><g><title>[libc-2.33.so] (2 samples, 0.01%)</title><rect x="48.3159%" y="133" width="0.0139%" height="15" fill="rgb(235,35,32)"/><text x="48.5659%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.15%)</title><rect x="48.3297%" y="133" width="0.1528%" height="15" fill="rgb(218,68,31)"/><text x="48.5797%" y="143.50"></text></g><g><title>_int_free (28 samples, 0.19%)</title><rect x="48.4825%" y="133" width="0.1945%" height="15" fill="rgb(207,120,37)"/><text x="48.7325%" y="143.50"></text></g><g><title>malloc_consolidate (15 samples, 0.10%)</title><rect x="49.3229%" y="117" width="0.1042%" height="15" fill="rgb(227,98,0)"/><text x="49.5729%" y="127.50"></text></g><g><title>_int_malloc (113 samples, 0.78%)</title><rect x="48.6770%" y="133" width="0.7848%" height="15" fill="rgb(207,7,3)"/><text x="48.9270%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.03%)</title><rect x="49.4270%" y="117" width="0.0347%" height="15" fill="rgb(206,98,19)"/><text x="49.6770%" y="127.50"></text></g><g><title>__GI___libc_realloc (238 samples, 1.65%)</title><rect x="47.8436%" y="165" width="1.6529%" height="15" fill="rgb(217,5,26)"/><text x="48.0936%" y="175.50"></text></g><g><title>_int_realloc (203 samples, 1.41%)</title><rect x="48.0867%" y="149" width="1.4098%" height="15" fill="rgb(235,190,38)"/><text x="48.3367%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.03%)</title><rect x="49.4618%" y="133" width="0.0347%" height="15" fill="rgb(247,86,24)"/><text x="49.7118%" y="143.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="49.4965%" y="165" width="0.0208%" height="15" fill="rgb(205,101,16)"/><text x="49.7465%" y="175.50"></text></g><g><title>alloc::alloc::realloc (245 samples, 1.70%)</title><rect x="47.8297%" y="181" width="1.7015%" height="15" fill="rgb(246,168,33)"/><text x="48.0797%" y="191.50"></text></g><g><title>__rust_realloc (2 samples, 0.01%)</title><rect x="49.5173%" y="165" width="0.0139%" height="15" fill="rgb(231,114,1)"/><text x="49.7673%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (254 samples, 1.76%)</title><rect x="47.7811%" y="229" width="1.7640%" height="15" fill="rgb(207,184,53)"/><text x="48.0311%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (247 samples, 1.72%)</title><rect x="47.8297%" y="213" width="1.7154%" height="15" fill="rgb(224,95,51)"/><text x="48.0797%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (247 samples, 1.72%)</title><rect x="47.8297%" y="197" width="1.7154%" height="15" fill="rgb(212,188,45)"/><text x="48.0797%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.01%)</title><rect x="49.5312%" y="181" width="0.0139%" height="15" fill="rgb(223,154,38)"/><text x="49.7812%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.03%)</title><rect x="49.5451%" y="229" width="0.0347%" height="15" fill="rgb(251,22,52)"/><text x="49.7951%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (5 samples, 0.03%)</title><rect x="49.5451%" y="213" width="0.0347%" height="15" fill="rgb(229,209,22)"/><text x="49.7951%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (5 samples, 0.03%)</title><rect x="49.5451%" y="197" width="0.0347%" height="15" fill="rgb(234,138,34)"/><text x="49.7951%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (5 samples, 0.03%)</title><rect x="49.5451%" y="181" width="0.0347%" height="15" fill="rgb(212,95,11)"/><text x="49.7951%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (311 samples, 2.16%)</title><rect x="47.4964%" y="245" width="2.1599%" height="15" fill="rgb(240,179,47)"/><text x="47.7464%" y="255.50">a..</text></g><g><title>core::cmp::max (11 samples, 0.08%)</title><rect x="49.5798%" y="229" width="0.0764%" height="15" fill="rgb(240,163,11)"/><text x="49.8298%" y="239.50"></text></g><g><title>core::cmp::Ord::max (11 samples, 0.08%)</title><rect x="49.5798%" y="213" width="0.0764%" height="15" fill="rgb(236,37,12)"/><text x="49.8298%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.08%)</title><rect x="49.5798%" y="197" width="0.0764%" height="15" fill="rgb(232,164,16)"/><text x="49.8298%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (322 samples, 2.24%)</title><rect x="47.4547%" y="293" width="2.2363%" height="15" fill="rgb(244,205,15)"/><text x="47.7047%" y="303.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (316 samples, 2.19%)</title><rect x="47.4964%" y="277" width="2.1946%" height="15" fill="rgb(223,117,47)"/><text x="47.7464%" y="287.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (316 samples, 2.19%)</title><rect x="47.4964%" y="261" width="2.1946%" height="15" fill="rgb(244,107,35)"/><text x="47.7464%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="49.6632%" y="245" width="0.0278%" height="15" fill="rgb(205,140,8)"/><text x="49.9132%" y="255.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_points_in_cluster (911 samples, 6.33%)</title><rect x="43.7114%" y="325" width="6.3268%" height="15" fill="rgb(228,84,46)"/><text x="43.9614%" y="335.50">Practica..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (414 samples, 2.88%)</title><rect x="47.1630%" y="309" width="2.8752%" height="15" fill="rgb(254,188,9)"/><text x="47.4130%" y="319.50">al..</text></g><g><title>core::ptr::write (50 samples, 0.35%)</title><rect x="49.6910%" y="293" width="0.3472%" height="15" fill="rgb(206,112,54)"/><text x="49.9410%" y="303.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (253 samples, 1.76%)</title><rect x="50.0382%" y="325" width="1.7571%" height="15" fill="rgb(216,84,49)"/><text x="50.2882%" y="335.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (3 samples, 0.02%)</title><rect x="51.8161%" y="261" width="0.0208%" height="15" fill="rgb(214,194,35)"/><text x="52.0661%" y="271.50"></text></g><g><title>__GI___libc_free (43 samples, 0.30%)</title><rect x="51.8369%" y="245" width="0.2986%" height="15" fill="rgb(249,28,3)"/><text x="52.0869%" y="255.50"></text></g><g><title>_int_free (31 samples, 0.22%)</title><rect x="51.9203%" y="229" width="0.2153%" height="15" fill="rgb(222,56,52)"/><text x="52.1703%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.01%)</title><rect x="52.1217%" y="213" width="0.0139%" height="15" fill="rgb(245,217,50)"/><text x="52.3717%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.35%)</title><rect x="51.7953%" y="293" width="0.3542%" height="15" fill="rgb(213,201,24)"/><text x="52.0453%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (51 samples, 0.35%)</title><rect x="51.7953%" y="277" width="0.3542%" height="15" fill="rgb(248,116,28)"/><text x="52.0453%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.31%)</title><rect x="51.8369%" y="261" width="0.3125%" height="15" fill="rgb(219,72,43)"/><text x="52.0869%" y="271.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="52.1356%" y="245" width="0.0139%" height="15" fill="rgb(209,138,14)"/><text x="52.3856%" y="255.50"></text></g><g><title>__GI___libc_free (32 samples, 0.22%)</title><rect x="52.1633%" y="181" width="0.2222%" height="15" fill="rgb(222,18,33)"/><text x="52.4133%" y="191.50"></text></g><g><title>_int_free (23 samples, 0.16%)</title><rect x="52.2258%" y="165" width="0.1597%" height="15" fill="rgb(213,199,7)"/><text x="52.4758%" y="175.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="52.3856%" y="181" width="0.0208%" height="15" fill="rgb(250,110,10)"/><text x="52.6356%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.02%)</title><rect x="52.3856%" y="165" width="0.0208%" height="15" fill="rgb(248,123,6)"/><text x="52.6356%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.27%)</title><rect x="52.1495%" y="261" width="0.2709%" height="15" fill="rgb(206,91,31)"/><text x="52.3995%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.27%)</title><rect x="52.1495%" y="245" width="0.2709%" height="15" fill="rgb(211,154,13)"/><text x="52.3995%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.27%)</title><rect x="52.1495%" y="229" width="0.2709%" height="15" fill="rgb(225,148,7)"/><text x="52.3995%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (39 samples, 0.27%)</title><rect x="52.1495%" y="213" width="0.2709%" height="15" fill="rgb(220,160,43)"/><text x="52.3995%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.27%)</title><rect x="52.1495%" y="197" width="0.2709%" height="15" fill="rgb(213,52,39)"/><text x="52.3995%" y="207.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="52.4064%" y="181" width="0.0139%" height="15" fill="rgb(243,137,7)"/><text x="52.6564%" y="191.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_cluster_mean_distance (6,397 samples, 44.43%)</title><rect x="8.0144%" y="357" width="44.4267%" height="15" fill="rgb(230,79,13)"/><text x="8.2644%" y="367.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::global_c..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_cluster_distance (6,371 samples, 44.25%)</title><rect x="8.1950%" y="341" width="44.2461%" height="15" fill="rgb(247,105,23)"/><text x="8.4450%" y="351.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::intra_c..</text></g><g><title>core::ptr::drop_in_place (93 samples, 0.65%)</title><rect x="51.7953%" y="325" width="0.6459%" height="15" fill="rgb(223,179,41)"/><text x="52.0453%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (93 samples, 0.65%)</title><rect x="51.7953%" y="309" width="0.6459%" height="15" fill="rgb(218,9,34)"/><text x="52.0453%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.29%)</title><rect x="52.1495%" y="293" width="0.2917%" height="15" fill="rgb(222,106,8)"/><text x="52.3995%" y="303.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.29%)</title><rect x="52.1495%" y="277" width="0.2917%" height="15" fill="rgb(211,220,0)"/><text x="52.3995%" y="287.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::take_as_vec (3 samples, 0.02%)</title><rect x="52.4203%" y="261" width="0.0208%" height="15" fill="rgb(229,52,16)"/><text x="52.6703%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="74.9149%" y="277" width="0.0139%" height="15" fill="rgb(212,155,18)"/><text x="75.1649%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.01%)</title><rect x="74.9149%" y="261" width="0.0139%" height="15" fill="rgb(242,21,14)"/><text x="75.1649%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.01%)</title><rect x="74.9149%" y="245" width="0.0139%" height="15" fill="rgb(222,19,48)"/><text x="75.1649%" y="255.50"></text></g><g><title>&lt;&amp;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.02%)</title><rect x="74.9149%" y="341" width="0.0208%" height="15" fill="rgb(232,45,27)"/><text x="75.1649%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.02%)</title><rect x="74.9149%" y="325" width="0.0208%" height="15" fill="rgb(249,103,42)"/><text x="75.1649%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.02%)</title><rect x="74.9149%" y="309" width="0.0208%" height="15" fill="rgb(246,81,33)"/><text x="75.1649%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (3 samples, 0.02%)</title><rect x="74.9149%" y="293" width="0.0208%" height="15" fill="rgb(252,33,42)"/><text x="75.1649%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (943 samples, 6.55%)</title><rect x="74.9358%" y="341" width="6.5491%" height="15" fill="rgb(209,212,41)"/><text x="75.1858%" y="351.50">&lt;alloc::v..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (943 samples, 6.55%)</title><rect x="74.9358%" y="325" width="6.5491%" height="15" fill="rgb(207,154,6)"/><text x="75.1858%" y="335.50">core::sli..</text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (943 samples, 6.55%)</title><rect x="74.9358%" y="309" width="6.5491%" height="15" fill="rgb(223,64,47)"/><text x="75.1858%" y="319.50">&lt;usize as..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (418 samples, 2.90%)</title><rect x="83.1377%" y="261" width="2.9030%" height="15" fill="rgb(211,161,38)"/><text x="83.3877%" y="271.50">co..</text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (418 samples, 2.90%)</title><rect x="83.1377%" y="245" width="2.9030%" height="15" fill="rgb(219,138,40)"/><text x="83.3877%" y="255.50">co..</text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (418 samples, 2.90%)</title><rect x="83.1377%" y="229" width="2.9030%" height="15" fill="rgb(241,228,46)"/><text x="83.3877%" y="239.50">co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (419 samples, 2.91%)</title><rect x="83.1377%" y="277" width="2.9099%" height="15" fill="rgb(223,209,38)"/><text x="83.3877%" y="287.50">ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (579 samples, 4.02%)</title><rect x="86.0476%" y="277" width="4.0211%" height="15" fill="rgb(236,164,45)"/><text x="86.2976%" y="287.50">hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (72 samples, 0.50%)</title><rect x="90.0688%" y="277" width="0.5000%" height="15" fill="rgb(231,15,5)"/><text x="90.3188%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.01%)</title><rect x="90.5688%" y="277" width="0.0139%" height="15" fill="rgb(252,35,15)"/><text x="90.8188%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.01%)</title><rect x="90.5688%" y="261" width="0.0139%" height="15" fill="rgb(248,181,18)"/><text x="90.8188%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,113 samples, 7.73%)</title><rect x="83.0683%" y="309" width="7.7297%" height="15" fill="rgb(233,39,42)"/><text x="83.3183%" y="319.50">&lt;hashbrown:..</text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,107 samples, 7.69%)</title><rect x="83.1099%" y="293" width="7.6880%" height="15" fill="rgb(238,110,33)"/><text x="83.3599%" y="303.50">&lt;hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_full (31 samples, 0.22%)</title><rect x="90.5827%" y="277" width="0.2153%" height="15" fill="rgb(233,195,10)"/><text x="90.8327%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (31 samples, 0.22%)</title><rect x="90.5827%" y="261" width="0.2153%" height="15" fill="rgb(254,105,3)"/><text x="90.8327%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (31 samples, 0.22%)</title><rect x="90.5827%" y="245" width="0.2153%" height="15" fill="rgb(221,225,9)"/><text x="90.8327%" y="255.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility (488 samples, 3.39%)</title><rect x="90.7980%" y="309" width="3.3891%" height="15" fill="rgb(224,227,45)"/><text x="91.0480%" y="319.50">Pra..</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::fitness (13,143 samples, 91.28%)</title><rect x="8.0144%" y="373" width="91.2772%" height="15" fill="rgb(229,198,43)"/><text x="8.2644%" y="383.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::fitness</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility (6,746 samples, 46.85%)</title><rect x="52.4411%" y="357" width="46.8505%" height="15" fill="rgb(206,209,35)"/><text x="52.6911%" y="367.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::infeasibility</text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,564 samples, 17.81%)</title><rect x="81.4848%" y="341" width="17.8068%" height="15" fill="rgb(245,195,53)"/><text x="81.7348%" y="351.50">&lt;std::collections::hash::map..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,564 samples, 17.81%)</title><rect x="81.4848%" y="325" width="17.8068%" height="15" fill="rgb(240,92,26)"/><text x="81.7348%" y="335.50">&lt;hashbrown::map::Iter&lt;K,V&gt; a..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (735 samples, 5.10%)</title><rect x="94.1871%" y="309" width="5.1045%" height="15" fill="rgb(207,40,23)"/><text x="94.4371%" y="319.50">hashbr..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (735 samples, 5.10%)</title><rect x="94.1871%" y="293" width="5.1045%" height="15" fill="rgb(223,111,35)"/><text x="94.4371%" y="303.50">hashbr..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (735 samples, 5.10%)</title><rect x="94.1871%" y="277" width="5.1045%" height="15" fill="rgb(229,147,28)"/><text x="94.4371%" y="287.50">core::..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (735 samples, 5.10%)</title><rect x="94.1871%" y="261" width="5.1045%" height="15" fill="rgb(211,29,28)"/><text x="94.4371%" y="271.50">core::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (10 samples, 0.07%)</title><rect x="99.2916%" y="309" width="0.0694%" height="15" fill="rgb(228,72,33)"/><text x="99.5416%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.07%)</title><rect x="99.2916%" y="293" width="0.0694%" height="15" fill="rgb(205,214,31)"/><text x="99.5416%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 0.06%)</title><rect x="99.3055%" y="277" width="0.0556%" height="15" fill="rgb(224,111,15)"/><text x="99.5555%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.06%)</title><rect x="99.3055%" y="261" width="0.0556%" height="15" fill="rgb(253,21,26)"/><text x="99.5555%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.06%)</title><rect x="99.3055%" y="245" width="0.0556%" height="15" fill="rgb(245,139,43)"/><text x="99.5555%" y="255.50"></text></g><g><title>malloc_consolidate (12 samples, 0.08%)</title><rect x="99.4027%" y="165" width="0.0833%" height="15" fill="rgb(252,170,7)"/><text x="99.6527%" y="175.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.13%)</title><rect x="99.3680%" y="197" width="0.1250%" height="15" fill="rgb(231,118,14)"/><text x="99.6180%" y="207.50"></text></g><g><title>_int_malloc (15 samples, 0.10%)</title><rect x="99.3888%" y="181" width="0.1042%" height="15" fill="rgb(238,83,0)"/><text x="99.6388%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.21%)</title><rect x="99.2916%" y="357" width="0.2083%" height="15" fill="rgb(221,39,39)"/><text x="99.5416%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.21%)</title><rect x="99.2916%" y="341" width="0.2083%" height="15" fill="rgb(222,119,46)"/><text x="99.5416%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.21%)</title><rect x="99.2916%" y="325" width="0.2083%" height="15" fill="rgb(222,165,49)"/><text x="99.5416%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.14%)</title><rect x="99.3611%" y="309" width="0.1389%" height="15" fill="rgb(219,113,52)"/><text x="99.6111%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (20 samples, 0.14%)</title><rect x="99.3611%" y="293" width="0.1389%" height="15" fill="rgb(214,7,15)"/><text x="99.6111%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.14%)</title><rect x="99.3611%" y="277" width="0.1389%" height="15" fill="rgb(235,32,4)"/><text x="99.6111%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.14%)</title><rect x="99.3611%" y="261" width="0.1389%" height="15" fill="rgb(238,90,54)"/><text x="99.6111%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.14%)</title><rect x="99.3611%" y="245" width="0.1389%" height="15" fill="rgb(213,208,19)"/><text x="99.6111%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.14%)</title><rect x="99.3611%" y="229" width="0.1389%" height="15" fill="rgb(233,156,4)"/><text x="99.6111%" y="239.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.14%)</title><rect x="99.3611%" y="213" width="0.1389%" height="15" fill="rgb(207,194,5)"/><text x="99.6111%" y="223.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::generate_solution_from (31 samples, 0.22%)</title><rect x="99.2916%" y="373" width="0.2153%" height="15" fill="rgb(206,111,30)"/><text x="99.5416%" y="383.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="99.6458%" y="341" width="0.0486%" height="15" fill="rgb(243,70,54)"/><text x="99.8958%" y="351.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (43 samples, 0.30%)</title><rect x="99.5139%" y="357" width="0.2986%" height="15" fill="rgb(242,28,8)"/><text x="99.7639%" y="367.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::is_valid::{{closure}} (17 samples, 0.12%)</title><rect x="99.6944%" y="341" width="0.1181%" height="15" fill="rgb(219,106,18)"/><text x="99.9444%" y="351.50"></text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::is_valid (54 samples, 0.38%)</title><rect x="99.5069%" y="373" width="0.3750%" height="15" fill="rgb(244,222,10)"/><text x="99.7569%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.07%)</title><rect x="99.8125%" y="357" width="0.0694%" height="15" fill="rgb(236,179,52)"/><text x="100.0625%" y="367.50"></text></g><g><title>__GI___libc_free (10 samples, 0.07%)</title><rect x="99.8889%" y="277" width="0.0694%" height="15" fill="rgb(213,23,39)"/><text x="100.1389%" y="287.50"></text></g><g><title>_int_free (4 samples, 0.03%)</title><rect x="99.9306%" y="261" width="0.0278%" height="15" fill="rgb(238,48,10)"/><text x="100.1806%" y="271.50"></text></g><g><title>__libc_start_main (13,341 samples, 92.65%)</title><rect x="7.3130%" y="581" width="92.6523%" height="15" fill="rgb(251,196,23)"/><text x="7.5630%" y="591.50">__libc_start_main</text></g><g><title>main (13,341 samples, 92.65%)</title><rect x="7.3130%" y="565" width="92.6523%" height="15" fill="rgb(250,152,24)"/><text x="7.5630%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (13,341 samples, 92.65%)</title><rect x="7.3130%" y="549" width="92.6523%" height="15" fill="rgb(209,150,17)"/><text x="7.5630%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (13,341 samples, 92.65%)</title><rect x="7.3130%" y="533" width="92.6523%" height="15" fill="rgb(234,202,34)"/><text x="7.5630%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,341 samples, 92.65%)</title><rect x="7.3130%" y="517" width="92.6523%" height="15" fill="rgb(253,148,53)"/><text x="7.5630%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,341 samples, 92.65%)</title><rect x="7.3130%" y="501" width="92.6523%" height="15" fill="rgb(218,129,16)"/><text x="7.5630%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13,341 samples, 92.65%)</title><rect x="7.3130%" y="485" width="92.6523%" height="15" fill="rgb(216,85,19)"/><text x="7.5630%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (13,341 samples, 92.65%)</title><rect x="7.3130%" y="469" width="92.6523%" height="15" fill="rgb(235,228,7)"/><text x="7.5630%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,341 samples, 92.65%)</title><rect x="7.3130%" y="453" width="92.6523%" height="15" fill="rgb(245,175,0)"/><text x="7.5630%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,341 samples, 92.65%)</title><rect x="7.3130%" y="437" width="92.6523%" height="15" fill="rgb(208,168,36)"/><text x="7.5630%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>PracticasMetaheuristicas::main (13,341 samples, 92.65%)</title><rect x="7.3130%" y="421" width="92.6523%" height="15" fill="rgb(246,171,24)"/><text x="7.5630%" y="431.50">PracticasMetaheuristicas::main</text></g><g><title>PracticasMetaheuristicas::local_search::run (13,333 samples, 92.60%)</title><rect x="7.3686%" y="405" width="92.5967%" height="15" fill="rgb(215,142,24)"/><text x="7.6186%" y="415.50">PracticasMetaheuristicas::local_search::run</text></g><g><title>PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_neighbour (13,328 samples, 92.56%)</title><rect x="7.4033%" y="389" width="92.5620%" height="15" fill="rgb(250,187,7)"/><text x="7.6533%" y="399.50">PracticasMetaheuristicas::problem_datatypes::solution::Solution::get_neighbour</text></g><g><title>core::ptr::drop_in_place (12 samples, 0.08%)</title><rect x="99.8819%" y="373" width="0.0833%" height="15" fill="rgb(228,66,33)"/><text x="100.1319%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.08%)</title><rect x="99.8889%" y="357" width="0.0764%" height="15" fill="rgb(234,215,21)"/><text x="100.1389%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.08%)</title><rect x="99.8889%" y="341" width="0.0764%" height="15" fill="rgb(222,191,20)"/><text x="100.1389%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.08%)</title><rect x="99.8889%" y="325" width="0.0764%" height="15" fill="rgb(245,79,54)"/><text x="100.1389%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (11 samples, 0.08%)</title><rect x="99.8889%" y="309" width="0.0764%" height="15" fill="rgb(240,10,37)"/><text x="100.1389%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.08%)</title><rect x="99.8889%" y="293" width="0.0764%" height="15" fill="rgb(214,192,32)"/><text x="100.1389%" y="303.50"></text></g><g><title>_start (13,347 samples, 92.69%)</title><rect x="7.2783%" y="597" width="92.6939%" height="15" fill="rgb(209,36,54)"/><text x="7.5283%" y="607.50">_start</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3 samples, 0.02%)</title><rect x="99.9722%" y="597" width="0.0208%" height="15" fill="rgb(220,10,11)"/><text x="100.2222%" y="607.50"></text></g><g><title>all (14,399 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(221,106,17)"/><text x="0.2500%" y="639.50"></text></g><g><title>PracticasMetahe (14,399 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(251,142,44)"/><text x="0.2500%" y="623.50">PracticasMetahe</text></g></svg></svg>